{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "cdot-tg",
	"repository": {
		"identifier": {
			"patterns": [
				{
					"match": "[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+",
					"name": "nothing.cdot-tg"
				}
			]
		},
		"dollar-identifier": {
			"patterns": [
				{
					"match": "\\$[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>~\\^,\\(\\)\\{\\}]+",
					"name": "keyword.control.cdot-tg"
				}
			]
		},
		"percent-identifier": {
			"patterns": [
				{
				"match": "%[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>~\\^,\\(\\)\\{\\}]+",
				"name": "storage.modifier.package.cdot-tg"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"name": "support.type.cdot-tg",
					"match": "[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+"
				}
		]
		},
		"template-arg-decl": {
			"patterns": [
				{
					"begin": "\\[",
					"end": "\\](?=\\s*(\\(|\\{|with|where|\\->|=|\\n))",
					"patterns": [{
							"match": "(value|typename)",
							"captures": {
								"1": {
									"name": "keyword.control.cdot-tg"
								}
							}
						},
						{
							"match": ":\\s*([a-zA-Z0-9]+)",
							"captures": {
								"1": {
									"name": "support.type.cdot-tg"
								}
							}
						},
						{
							"include": "#literals"
						},
						{
							"include": "#operators"
						}
					]
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.cdot-tg",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "constant.numeric.hex.cdot-tg",
					"match": "\\b\\-?0[xX][0-9a-fA-F]+[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.binary.cdot-tg",
					"match": "\\b\\-?0[bB][01]+[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.octal.cdot-tg",
					"match": "\\b\\-?0[1-9][0-9]*[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.decimal.cdot-tg",
					"match": "\\b-?(?:0|[1-9][0-9_]*)(?:\\.[0-9]+){0,1}(?:[eE][-]{0,1}[0-9]+){0,1}([uU][lL]?|[lL][uU]?|[fF]|[dD])?\\b"
				},
				{
					"name": "constant.other.placeholder.cdot-tg",
					"match": "%[cCdDiIeEfFsS]|%[lL][lL]?[uU]"
				}, {
					"name": "string.quoted.double.cdot-tg",
					"begin": "\"",
					"end": "(?<!\\\\)\"",
					"beginCaptures": {
						"0": {
							"name": "string.quoted.double.cdot-tg"
						}
					},
					"endCaptures": {
						"0": {
							"name": "string.quoted.double.cdot-tg"
						}
					}
				},
				{
					"name": "string.quoted.single.cdot-tg",
					"match": "'(.|\\\\u\\{[0-9a-fA-F]{1,4}\\}|\\\\[narvtb\"'0])'"
				},
				{
					"name": "string.quoted.other.cdot-tg",
					"match": "`[^`]*`"
				},
				{
					"match": "(@[a-zA-Z0-9_]+)\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.attribute.cdot-tg"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.other.cdot-tg",
					"match": "\\[|\\]"
				}, {
					"name": "keyword.operator.logical.cdot-tg",
					"match": "(&&|\\|\\||!)"
				}, {
					"name": "keyword.operator.arithmetic.cdot-tg",
					"match": "(\\+|\\*|-(?=[^0-9])|/|%|\\*\\*)"
				}, {
					"name": "keyword.operator.bitwise.cdot-tg",
					"match": "(===|!==|<<|>>|~|&|\\^|\\|)"
				}, {
					"name": "keyword.operator.comparison.cdot-tg",
					"match": "(==|!=|<|>|<=|>=)"
				}, {
					"name": "keyword.operator.assignment.cdot-tg",
					"match": "="
				},
				{
					"begin": "#\\{",
					"end": "\\}",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.other.cdot-tg"
						}
					},
					"endCaptures": {
						"0": {
							"name": "keyword.operator.other.cdot-tg"
						}
					},
					"patterns": [
						{
							"include": "#literals"
						},
						{
							"include": "#operators"
						},
						{
							"match": ".",
							"name": "keyword.operator.ident.cdot-tg"
						}
					]
				}
			]
		}
	},
	"patterns": [
		{
			"include": "#dollar-identifier"
		},
		{
			"include": "#percent-identifier"
		},
		{
			"name": "comment.block.cdot-tg",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.block.documentation.cdot-tg",
			"begin": "/\\*\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.line.cdot-tg",
			"begin": "//",
			"end": "\\n"
		},
		{
			"name": "keyword.control.cdot-tg",
			"match": "\\b(let|override|class|enum|def|if|foreach|in|print|namespace)\\b"
		},
		{
			"name": "keyword.control.cdot-tg",
			"match": "#(define|ifdef|ifndef|undef|if|endif|else|elseif|pragma|rawdef|enddef|let|endfor|print|include|endnamespace)\\b"
		},
		{
			"match": "(#macro|#?using|module|#?namespace|import)\\s+(?:[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+\\.?)+",
			"captures": {
				"1": {
					"name": "keyword.control.cdot-tg"
				}
			}
		},
		{
			"match": "(#?namespace)\\s*(?=\\{)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot-tg"
				}
			}
		},
		{
			"match": "(#for)\\s+[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+\\s+(in)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot-tg"
				},
				"2": {
					"name": "keyword.control.cdot-tg"
				}
			}
		},
		{
			"include": "#literals"
		},
		{
			"match": "\\:\\s*([a-zA-Z$_][0-9a-zA-Z$_]*)",
			"captures": {
				"1": {
					"name": "support.type.cdot-tg"
				}
			}
		},
		{
			"match": "!\\s*(allof|concat|first|last|push|pop|str_concat|eq|ne|at)",
			"captures": {
				"1": {
					"name": "support.function.any-method.cdot-tg"
				}
			}
		},
		{
			"include": "#identifier"
		}
	],
	"scopeName": "source.cdot-tg"
}