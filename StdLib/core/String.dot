
import builtin

using atomic.Atomic

/// The default string type used by the compiler for string literals.
public alias DefaultStringLiteralType = String

public protocol StringRepresentable {
    def toString() -> String
}

public protocol StringInitializable {
    init? (_ s: String)
}

public protocol ExpressibleByStringLiteral {
    init (stringLiteral s: String)
}

// Since the default assert macro uses strings, we can't use it to report failures in String itself.
private macro _string_assert(
    ($cond:any, $msg:expr) => {
        static if reflect.debug {
            if !($cond) {
                _ = libc.stdio.printf("[21;31massertion failed:%s\n", stringify!($cond) as libc.cstring)
            }
        }
    }
)

private macro _string_precondition(
    ($cond:any, $msg:expr) => {
        if !($cond) {
            _ = libc.stdio.printf("[21;31mprecondition failed:%s\n", stringify!($cond) as libc.cstring)
        }
    },
    ($cond:any) => {
        if !($cond) {
            _ = libc.stdio.printf("[21;31mprecondition failure%s\n")
        }
    }
)

@_builtin @compiletime
fileprivate struct StringBuffer {
    var _owner: UnsafeMutablePtr<StringBuffer> = .null
    var _chars: UnsafeMutableBufferPtr<Byte>
    var _size: Int
    var _capacity: Int

    /// This buffers reference count.
    /// If it is zero, the buffer is not currently shared.
    var atomicRefCount: Atomic<UInt32> = Atomic<UInt32>()

    /// Flag that is set when this string contains only ASCII characters.
    static let ASCIIFlag = 1 << 61

    /// Flag that is currently unused.
    static let UnusedFlag = 1 << 62

    /// Flag that is set when this String buffer owns its memory.
    static let OwnedFlag = 1 << 63

    /// Mask to get the capacity from the raw value.
    static let CapacityMask = ~(OwnedFlag | UnusedFlag | ASCIIFlag)

    /// Default capacity to allocate when growing from zero.
    static let DefaultCapacity = 32

    /// Memberwise C'tor.
    fileprivate memberwise init

    /// Default C'tor. Initializes an owned, small string buffer.
    init {
        self._owner = .null
        self._chars = .null
        self._size = 0
        self._capacity = 0
    }

    /// C'tor. Initialize from an unowned external buffer.
    @_builtin("StringBuffer.init(unownedBuffer:size:)")
    init (unownedBuffer bytes: UnsafeMutableBufferPtr<Byte>, size: Int) {
        self.init()
        self.isOwned = false

        uncheckedInsert(UnsafeBufferPtr<Byte>(rawPointer: bytes.rawPointer), size, at: byteSize)
    }

    /// Initialize from a static string. This is only called by the compiler
    /// when the lifetime of \param bytes is guaranteed to exceed the lifetime of
    /// this string.
    fileprivate init (staticString bytes: UnsafeMutableBufferPtr<Byte>, size: Int) {
        self.init()

        self.isOwned = false
        self._chars = bytes
        self._size = size
        self.isAscii = true

        checkASCII(bytes, size)
    }

    /// Initialize a substring.
    init (owner: UnsafeMutablePtr<StringBuffer>, bounds: Range<Int>) {
        owner->ensureRefcounted()
        owner->retain()

        self._owner = owner
        self._chars = owner->_chars + bounds.startIndex
        self._size = bounds.size
        self._capacity = 0

        self.isOwned = false
        self.isAscii = owner->isAscii
    }

    /// D'tor. Only called via UnsafePtr.deinitialize
    deinit {
        self._chars.deallocate()
    }

    /// Called by StringStorage.
    def mutating deinitialize() {
        if _owner {
            _owner->release()
        }
        else if isOwned {
            self._chars.deallocate()
        }
    }

    /// \return the flags of this StringBuffer.
    prop flags: Int {
        get {
            return _capacity
        }
        set {
            _capacity = newVal
        }
    }

    /// \return true iff this String is purely ASCII.
    prop isAscii: Bool {
        get {
            return flags & ASCIIFlag != 0
        }
        set {
            if newVal {
                flags = flags | ASCIIFlag
            }
            else {
                flags = flags & ~ASCIIFlag
            }
        }
    }

    /// \return true iff this StringBuffer owns its memory.
    prop isOwned: Bool {
        get {
            return flags & OwnedFlag != 0
        }
        set {
            if newVal {
                flags = flags | OwnedFlag
            }
            else {
                flags = flags & ~OwnedFlag
            }
        }
    }

    /// \return this buffers current reference count.
    prop refcount: UInt32 {
         _string_assert!(refcounted, "StringBuffer is not refcounted!")
        return atomicRefCount.load()
    }

    /// \return true iff this buffer is currently refcounted.
    prop refcounted: Bool {
        return !atomicRefCount.isNull
    }

    /// \return this strings current size in bytes.
    prop byteSize: Int {
        get {
            return _size
        }
        set {
            _size = newVal
        }
    }

    /// \return this strings current capacity in bytes.
    prop byteCapacity: Int {
        get {
            return _capacity & CapacityMask
        }
        set {
             _string_assert!(newVal & ~CapacityMask == 0, "capacity too large!")

            _capacity &= ~CapacityMask
            _capacity |= newVal
        }
    }

    /// Increments this buffer's reference count by one.
    def mutating retain() {
        _string_assert!(refcounted, "StringBuffer is not refcounted!")
        atomicRefCount += 1
    }

    /// Decrements this buffer's reference count by one.
    def mutating release() {
        _string_assert!(refcounted, "StringBuffer is not refcounted!")
        atomicRefCount -= 1

        if atomicRefCount.load() == 0 {
            // Controlled self destruction.
            self._owner = .null
            UnsafeMutablePtr<Self>(rawPointer: builtin.addressOf(self)).deinitialize()
            atomicRefCount.deinitialize()
        }
    }

    /// Turn this into a refcounted buffer.
    def mutating ensureRefcounted() {
        if !atomicRefCount.isNull {
            return
        }

        if !isOwned {
            makeOwned()
        }

        self.atomicRefCount = Atomic<UInt32>(allocatingMemory: 0)
        self._owner = UnsafeMutablePtr<Self>(rawPointer: builtin.addressOf(self))
        self.retain()
    }

    /// Check whether the given bytes contain non-ascii characters and change
    /// the ASCII flag accordingly.
    def mutating checkASCII(_ bytes: UnsafeBufferPtr<Byte>, size: Int) {
        if !isAscii {
            return
        }

        for i in 0..size {
            if bytes[i] > 127 {
                isAscii = false
                return
            }
        }
    }

    /// Turn this buffer into an isOwned buffer, if it is not already one.
    def mutating makeOwned(ensuringCapacity minCapacity: Int = 0) {
        if isOwned {
            // Check if we have enough capacity.
            if byteCapacity < minCapacity {
                grow(toAtLeast: minCapacity)
            }

            return
        }

        var minCapacity = minCapacity
        if minCapacity == 0 {
            minCapacity = math.max(DefaultCapacity, math.closestPowerOfTwo(roundingUp: byteSize))
        }

        // Allocate storage.
        var buffer = UnsafeMutableBufferPtr<Byte>.allocate(minCapacity)

        // Copy existing bytes.
        mem.copy(to: buffer, from: _chars, byteSize)

        // Remember previous size.
        var prevSize = byteSize

        // Mark memory as owned.
        self.isOwned = true
        self._chars = buffer
        self._size = prevSize
        self.byteCapacity = minCapacity
    }

    /// Insert the given raw bytes into the buffer at the specified position,
    /// these must be valid UTF8.
    def mutating uncheckedInsert(_ bytes: UnsafeBufferPtr<Byte>,
                                 _ size: Int,
                                 at position: Int) {
        var neededCapacity = byteSize + size
        grow(toAtLeast: neededCapacity)

        checkASCII(bytes, size)

        if position != byteSize {
            // Move the following elements.
            mem.move(to: self._chars + (position + size),
                     from: self._chars + position,
                     size)
        }

        mem.copy(to: self._chars + position, from: bytes, size)
        self._size += size
    }

    /// Remove \param n bytes following \param position.
    def mutating remove(count n: Int, at position: Int) {
         _string_assert!(position + n < byteSize, "removing more bytes than exist")

        /// Copy all following bytes behind by n bytes.
        mem.move(to: self._chars + position,
                 from: self._chars + (position + n),
                 n)

        /// Reduce our size.
        _size -= n
    }

    /// Reverse the bytes in the buffer.
    def mutating reverseBytes(fromIndex position: Int) {
        mem.reverse(self._chars + position,
                    self._size - position)
    }

    /// Grow this buffer by at least \param n bytes.
    /// \param n the minimum number of bytes to grow.
    def mutating grow(toAtLeast n: Int = 1) {
        if n <= byteCapacity {
            return
        }

        var growTo = math.closestPowerOfTwo(roundingUp: n)
        if !isOwned {
            return makeOwned(ensuringCapacity: growTo)
        }

        // Reallocate to make sure there is enough storage.
        _chars = mem.reallocate(_chars, toSize: growTo)
        byteCapacity = growTo
    }

    /// Clear the storage buffer.
    def mutating clear() {
        _size = 0
    }
}

extend StringBuffer with Copyable {
    /// \inherit
    public def copy() -> Self {
        var copy = StringBuffer(_chars, _size, _capacity)
        copy.isOwned = false
        return copy
    }
}

extend StringBuffer {
    def _dump() {
        var s = "StringBuffer ${UnsafePtr(referencing: self)} {\n"
        s += "   isOwned = $isOwned,\n"
        s += "   refcount = $refcount,\n"
        s += "   byteSize = $byteSize,\n"
        s += "   byteCapacity = $byteCapacity,\n"
        s += "   bytes = '${String(cstring: _chars, size: byteSize)}'\n"
        s += "}"

        print(s)
    }

    private static def printBinary(_ value: Int) {
        _ = libc.stdio.printf("0b")
        for i in 0..value.bitWidth {
            if value & (1 << i) != 0 {
                _ = libc.stdio.printf("1")
            } else {
                _ = libc.stdio.printf("0")
            }
        }
    }

    def _dumpBinaryLayout() {
        _ = libc.stdio.printf("StringBuffer {\n")

        _ = libc.stdio.printf("   _chars: ")
        printBinary(_chars.rawValue)

        _ = libc.stdio.printf("\n   _size: ")
        printBinary(_size)

        _ = libc.stdio.printf("\n   _capacity: ")
        printBinary(_capacity)

        _ = libc.stdio.printf("\n}\n")
    }
}

@_builtin struct StringStorage {
    /// Flag that is set when the String is purely ASCII.
    static let ASCIIFlag: Byte = 0b1000_0000

    /// Flag that is set when this String is using a small, inline representation.
    static let SmallFlag: Byte = 0b0100_0000

    /// This bit is currently unused.
    static let UnusedBit: Byte = 0b0010_0000

    /// Mask to extract the 5-bit size from a byte.
    static let SmallSizeMask: Byte = 0b0001_1111

    /// Number of inline bytes that fit into the small representation.
    static let SmallCapacity = 2 * reflect.sizeOf<Int> - 1

    /// The raw opaque storage of this string.
    var storage: (Int, Int)

    /// Initializes a small, empty string.
    init {
        self.storage = (0, 0)
        self.isSmall = true
        self.isAscii = true
    }

    /// Memberwise initializer.
    internal memberwise init

    /// Initialize from an existing buffer.
    init (_ buffer: UnsafeMutablePtr<StringBuffer>) {
        self.init()

        buffer->ensureRefcounted()
        buffer->retain()
        self.buffer = buffer
    }

    /// Initialize a substring.
    init (_ storage: borrow StringStorage, bounds: Range<Int>) {
        if storage.isSmall {
            self.init()
            self.uncheckedInsert(storage.rawBytes, storage.byteSize, at: 0)
        }
        else {
            var buffer = mem.new(StringBuffer(owner: storage.buffer, bounds: bounds))
            self.init(buffer)
        }
    }

    /// Initialize from a static string. This is only called by the compiler
    /// when the lifetime of the buffer is guaranteed to exceed the lifetime of
    /// this string.
    init (staticString bytes: libc.cstring, size: Int) {
        self.init()

        var buf = mem.new(StringBuffer(staticString: UnsafeMutableBufferPtr<Byte>(rawPointer: bytes), size))
        self.buffer = buf
    }

    /// Initialize from externally allocated bytes whose lifetime must exceed the lifetime
    /// of this string.
    init (cstring bytes: UnsafeMutableBufferPtr<Byte>, size: Int = -1) {
        var size = size
        var rawBytes = bytes.rawPointer as! libc.cstring

        if size == -1 {
            size = Int(builtin.signcast(libc.string.strlen(rawBytes)))
        }

        self.init(staticString: rawBytes, size)
    }

    /// D'tor.
    deinit {
        if isSmall {
            return
        }

        buffer->deinitialize()
    }

    /// \return the flags of this StringBuffer.
    prop flags: Byte {
        get {
            return Byte(truncatingIfNeeded: storage.1 >> 56)
        }
        set {
            storage.1 &= -1 >> 8
            storage.1 |= (Int(newVal) << 56)
        }
    }

    /// \return true iff this StringBuffer uses a small representation.
    prop isSmall: Bool {
        get {
            return flags & SmallFlag != 0
        }
        set {
            if newVal {
                flags = flags | SmallFlag
            }
            else {
                flags = flags & ~SmallFlag
            }
        }
    }

    /// \return true iff this String is purely ASCII.
    prop isAscii: Bool {
        get {
            if isSmall {
                return flags & ASCIIFlag != 0
            }

            return buffer->isAscii
        }
        set {
            if isSmall {
                if newVal {
                    flags = flags | ASCIIFlag
                }
                else {
                    flags = flags & ~ASCIIFlag
                }
            } else {
                buffer->isAscii = newVal
            }
        }
    }

    /// \return true iff this String owns its storage.
    prop isOwned: Bool {
        if isSmall {
            return true
        }

        return buffer->isOwned
    }

    /// \return the number of bytes currently stored.
    prop byteSize: Int {
        get {
            if isSmall {
                return Int(flags & SmallSizeMask)
            }

            return buffer->byteSize
        }
        set {
            if isSmall {
                flags = flags & ~SmallSizeMask
                flags = flags | Byte(newVal)
            } else {
                buffer->byteSize = newVal
            }
        }
    }

    /// \return the number of bytes we can store without resizing.
    prop byteCapacity: Int {
        get {
            if isSmall {
                return SmallCapacity
            }

            return buffer->byteCapacity
        }
    }

    /// \return the raw byte pointer.
    prop rawBytes: UnsafeMutableBufferPtr<Byte> {
        get {
            if isSmall {
                return UnsafeMutableBufferPtr<Byte>(rawPointer: builtin.addressOf(self.storage))
            }

            return buffer->_chars
        }
    }

    /// \return the buffer pointer.
    prop buffer: UnsafeMutablePtr<StringBuffer> {
        get {
             _string_assert!(!isSmall, "small string does not have a buffer!")
            return UnsafeMutablePtr<StringBuffer>(rawValue: storage.0)
        }
        set {
            isSmall = false
            storage.0 = Int(newVal.rawValue)
        }
    }

    /// Grow this buffer to be able to store at least the given number of bytes.
    def mutating grow(toAtLeast n: Int = 0) {
        var n = n
        if n == 0 {
            n = math.closestPowerOfTwo(roundingUp: byteSize + 1)
        }

        if isSmall {
            // Enough space in the small representation.
            if n <= SmallCapacity {
                return
            }

            // We need to move to external storage.
            var buf = mem.new(StringBuffer(unownedBuffer: rawBytes, size: byteSize))
            buf->makeOwned()

            self.buffer = buf
            return
        }

        buffer->grow(toAtLeast: n)
    }

    /// Check whether the given bytes contain non-ascii characters and change
    /// the ASCII flag accordingly.
    def mutating checkASCII(_ bytes: UnsafeBufferPtr<Byte>, size: Int) {
        if !isAscii {
            return
        }

        for i in 0..size {
            if bytes[i] > 127 {
                isAscii = false
                return
            }
        }
    }

    /// Insert the given raw bytes into the buffer at the specified position,
    /// these must be valid UTF8.
    def mutating uncheckedInsert(_ bytes: UnsafeBufferPtr<Byte>,
                                 _ size: Int,
                                 at position: Int) {
        grow(toAtLeast: byteSize + size)
        checkASCII(bytes, size)

        if position != byteSize {
            // Move the following elements.
            mem.move(to: self.rawBytes + (position + size),
                     from: self.rawBytes + position,
                     size)
        }

        mem.copy(to: self.rawBytes + position, from: bytes, size)
        self.byteSize = self.byteSize + size
    }

    /// Replace a subrange with a different byte sequence of the same size.
    def mutating replace(from index: Int, with bytes: UnsafeBufferPtr<Byte>, size n: Int) {
         _string_assert!(index + n <= byteSize, "subrange is out of bounds!")
        mem.copy(to: self.rawBytes + index, from: bytes, n)
    }

    /// Remove \param n bytes following \param position.
    def mutating remove(count n: Int64, at position: Int64) {
         _string_assert!(position + n < byteSize, "bad remove parameters")

        /// Copy all following bytes behind by n bytes.
        mem.move(to: self.rawBytes + position,
                 from: self.rawBytes + (position + n),
                 n)

        /// Reduce our size.
        byteSize = byteSize - n
    }

    /// Reverse the bytes in the buffer.
    def mutating reverse(fromIndex position: Int) {
        mem.reverse(self.rawBytes + position,
                    self.byteSize - position)
    }

    /// Clear the storage buffer.
    def mutating clear() {
        if isSmall {
            byteSize = 0
        }
        else {
            buffer->clear()
        }
    }
}

extend StringStorage with Copyable, Equatable {
    /// \inherit
    def copy() -> Self {
        if isSmall {
            return StringStorage(storage)
        }

        return StringStorage(self.buffer)
    }
}

@_builtin @compiletime @testable
public struct String with ExpressibleByStringLiteral {
    /// The underlying storage of this string.
    fileprivate var storage: StringStorage

    /// Initialize from a static string. This is only called by the compiler
    /// when the lifetime of the buffer is guaranteed to exceed the lifetime of
    /// this string.
    @_builtin("String.init(staticString:size:)")
    private init (staticString bytes: libc.cstring, size: builtin.i64) {
        self.storage = StringStorage(staticString: bytes, size: Int(size))
    }

    /// ExpressibleByStringLiteral requirement.
    init (stringLiteral s: String) {
        self = s
    }

    /// Initialize from a single character.
    init (singleCharacter c: Character) {
        self.storage = StringStorage()

        var asciiVal = c.ascii
        storage.uncheckedInsert(UnsafeBufferPtr<UInt8>(referencing: &asciiVal), 1, at: 0)
    }

    /// C'tor. Initialize from externally allocated bytes whose lifetime must exceed the lifetime
    /// of this string.
    @_builtin("String.init(cstring:size:)")
    init (cstring bytes: UnsafeMutableBufferPtr<Byte>, size: Int = -1) {
        self.storage = StringStorage(cstring: bytes, size)
    }

    /// Initialize from any String representable value.
    init<T: StringRepresentable> (_ t: borrow T) {
        self = t.toString()
    }

    /// Initialize from a meta type.
    // init<T> (metaType meta: MetaType<T>) {
    //     self.init(cstring: meta.typeof.name)
    // }

    /// Memberwise C'tor.
    private memberwise init

    /// \return the raw bytes of this string.
    prop rawBytes: UnsafeBufferPtr<Byte> {
        return UnsafeBufferPtr<Byte>(storage.rawBytes)
    }

    /// \return the byte size of this string.
    prop byteSize: Int {
        return storage.byteSize
    }

    /// \return the byte capacity of this string.
    prop byteCapacity: Int {
        return storage.byteCapacity
    }

    /// \return `true` iff this string owns its storage.
    prop storageIsOwned: Bool {
        return storage.isOwned
    }

    /// Append the contents of \param str to this string.
    @_builtin("String.infix +=(_:)")
    def mutating infix += (str: String) {
        storage.uncheckedInsert(str.rawBytes, str.byteSize, at: endIndex)
    }
}

extend String {
    /// Ensure that the last character in this string is a NUL.
    public def mutating ensureNullTerminated() {
        if byteCapacity <= byteSize + 1 {
            storage.grow()
        }

        // We can't use String's own subscript here since the index is technically out-of-bounds.
        storage.rawBytes[byteSize] = '\0'
    }

    /// \return a NUL terminated c string of this string.
    internal prop unsafeCString: UnsafeBufferPtr<Byte> {
        // Since this is not mutating, we need this ugly conversion here.
        var SelfPtr = UnsafeMutablePtr<Self>(rawPointer: builtin.addressOf(self))
        SelfPtr->ensureNullTerminated()

        return rawBytes
    }

    /// Execute the passed closure with a pointer to a NUL-terminated C-String.
    /// \return the return value of the closure.
    public def mutating withCString<T>(closure: (UnsafeBufferPtr<Byte>) -> T) -> T {
        return closure(self.unsafeCString)
    }
}

extend String {
    struct ASCIIView with Iterable, IteratorProtocol {
        /// The String that this view is for.
        internal var str: String

        /// The current index into the ascii buffer.
        internal var idx: Int

        /// C'tor.
        init (_ str: String) {
            self.str = str
            self.idx = 0
        }

        /// \inherit
        alias Element = Byte

        /// \inherit
        public def mutating next() -> Byte? {
            if idx == str.byteSize {
                return none
            }

            var c = str.rawBytes[idx]
            idx += 1

            return .Some(c)
        }

        /// \inherit
        alias It = Self

        /// \inherit
        public def getIterator() -> Self {
            return self.copy()
        }
    }

    /// \return true iff this string contains only ascii characters.
    prop isAscii: Bool {
        return storage.isAscii
    }

    /// \return an ASCII view of this string's contents.
    prop ascii: ASCIIView {
        return ASCIIView(self)
    }
}

extend String with RangeReplaceableCollection {
    /// \inherit
    alias Element = Character

    /// \inherit
    alias Index = Int

    /// \inherit
    alias SubSequence = Self

    /// Empty C'tor. Initializes an empty string.
    init {
        self.storage = StringStorage()
    }

    /// \inherit
    prop size: Int {
        if likely(isAscii) {
            return byteSize
        }

        unreachable!("unimplemented")
    }

    /// \inherit
    prop capacity: Int {
        if likely(isAscii) {
            return byteCapacity
        }

        unreachable!("unimplemented")
    }

    /// \inherit
    prop startIndex: Index {
        return 0
    }

    /// \inherit
    prop endIndex: Index {
        return size
    }

    /// \inherit
    subscript (idx: Index) -> Element {
        get {
            _checkIndex(idx)
            if isAscii {
                return Character(ascii: rawBytes[idx])
            }

            unimplemented!()
        }
        set {
            _checkIndex(idx)
            if isAscii {
                return storage.rawBytes[idx] = newVal.ascii
            }

            unimplemented!()
        }
    }

    /// \inherit
    subscript (_ range: Range<Index>) -> SubSequence {
        get {
            return String(storage: StringStorage(storage, bounds: range))
        }
        set {
            if isAscii && newVal.isAscii {
                storage.replace(from: range.startIndex,
                                with: newVal.rawBytes,
                                size: range.size)

                return
            }

            replaceSubrange(range, with: newVal)
        }
    }

    /// \inherit
    def mutating replaceSubrange<C: Collection>(
        _ subRange: Range<Index>, with newElements: C
    ) where C.Element == Element {
        _string_precondition!(subRange.startIndex >= self.startIndex && subRange.endIndex <= self.endIndex, 
                              "invalid indices passed to String.replaceSubrange")

        var result = String()

        if subRange.startIndex > 0 {
            result += self[0..subRange.startIndex]
        }

        result += newElements

        if subRange.endIndex < self.endIndex {
            result += self[subRange.endIndex..self.endIndex]
        }

        self = result
    }

    /// \inherit
    def mutating append(_ newElement: owned Character) {
        var ascii = newElement.ascii
        storage.uncheckedInsert(UnsafeBufferPtr<Byte>(rawPointer: builtin.addressOf(ascii)), 1, at: storage.byteSize)
    }
}

extend String {
    /// \return a sub-sequence of this string at the given offset and
    /// with the given length.
    def mutating substr(from offset: Index = 0,
                        length: Int = .max) -> String {
        if offset >= byteSize {
            return ""
        }

        var len = math.min(byteSize - offset, length)
        var to = startIndex + len

        return self[offset..to]
    }

    def levenshteinDistance(to str: String) -> Int {
        if empty { return str.size }
        if str.empty { return size }

        let cost = if self[0] == str[0] then 0 else 1
        return math.min(
            self.dropFirst().levenshteinDistance(to: str) + 1,
            self.levenshteinDistance(to: str.dropFirst()) + 1,
            self.dropFirst().levenshteinDistance(to: str.dropFirst()) + cost)
    }
}

extend String with StringInitializable {
    /// \inherit
    init? (_ s: String) {
        self = s
    }
}

extend String with StringRepresentable {
    /// \inherit
    def toString() -> String {
        return self.copy()
    }
}

/// djb2 hash - see http://www.cse.yorku.ca/~oz/hash.html
fileprivate def djb2(_ chars: UnsafeBufferPtr<Byte>, _ size: Int) -> UInt {
    var hash: UInt = 5381
    for i in 0..size {
        hash = ((hash << 5) + hash) + UInt(chars[i])
    }

    return hash
}

extend String with Hashable {
    def hashValue() -> UInt {
        return djb2(rawBytes, byteSize)
    }
}
