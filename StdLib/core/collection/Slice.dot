
module std.collection

// FIXME
protocol _Slice {}

public struct Slice<Base : RandomAccessCollection> with _Slice {
    /// The base collection of the slice.
    internal var base: Base

    /// The begin index into the collection.
    var baseIndex: Base.Index

    /// The length of this slice.
    var length: Int

    /// Memberwise C'tor.
    public memberwise init
}

extend Slice with RandomAccessCollection {
    /// \inherit
    associatedType Element = Base.Element

    /// \inherit
    init {
        base = Base()
        baseIndex = base.startIndex
        length = 0
    }

    /// \inherit
    prop size: Int {
        return length
    }

    /// \inherit
    associatedType Index = Base.Index

    /// \inherit
    prop startIndex: Index {
        return baseIndex
    }

    /// \inherit
    prop endIndex: Index {
        return baseIndex.advanced(by: length)
    }

    /// \inherit
    subscript (idx: Index) -> Element {
        return base[baseIndex + idx]
    }

    /// The type of sub sequences of this collection.
    associatedType SubSequence = Self

    /// \return a subsequence of this collection with the specified range.
    subscript (range: Range<Index>) -> SubSequence {
        return Slice(self.base,
                     baseIndex: range.startIndex + baseIndex,
                     length: range.size)
    }
}