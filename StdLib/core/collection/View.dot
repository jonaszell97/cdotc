
module std.collection

struct View<Base: Iterable, ViewType> {
    /// Iterator over the sequence we are viewing.
    internal var it: Base.It

    /// C'tor.
    init (_ base: Base) {
        self.it = base.getIterator()
    }
}

extend View with Iterable, IteratorProtocol {
    /// \inherit
    associatedType Element = ViewType

    /// \inherit
    associatedType It = Self

    /// \inherit
    def mutating next() -> Element? {
        var nextVal = it.next()
        if !nextVal {
            return none
        }

        if var conv = nextVal! as? ViewType {
            return .Some(conv)
        }

        return next()
    }
}