
module std.collection

struct FixedSizeArrayIterator<T, let V: usize> {
    let arr: [T; V]
    var idx: usize = 0u
}

extend FixedSizeArrayIterator with IteratorProtocol {
    associatedType Element = T

    def mutating next() -> T? {
        if idx == V {
            return none
        }

        return .Some(arr[idx++])
    }
}

public def getIterator<T, let V: usize>(_ arr: [T; V]) -> FixedSizeArrayIterator<T, V> {
    return FixedSizeArrayIterator(arr)
}