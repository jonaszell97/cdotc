
module std.rand

class MersenneTwister {
    // Assumes W = 32 (omitting this)
    static let N: u32 = 624
    static let M: u32 = 397
    static let R: u32 = 31
    static let A: u32 = 0x9908B0DF

    static let F: u32 = 1812433253

    static let U: u32 = 11
    // Assumes D = 0xFFFFFFFF (omitting this)

    static let S: u32 = 7
    static let B: u32 = 0x9D2C5680

    static let T: u32 = 15
    static let C: u32 = 0xEFC60000

    static let L: u32 = 18

    static let MASK_LOWER: u32 = ((1u32) << (R as u32)) - 1
    static let MASK_UPPER: u32 = ((1u32) << (R as u32))

    var mt: UnsafePtr<u32>
    var index: u32

    init {
        self.init(usingSeed: libc.time(0 as! UnsafeMutableRawPtr) as i32)
    }
    
    init (usingSeed seed: i32) {
        self.index = N
        self.mt = _cdot_Malloc((N as u64) * reflect.sizeOf<u32>) as! UnsafePtr<u32>
        
        mt[0] = seed as u32

        for var i: u32 = 1; i < N; ++i {
            mt[i] = (F * (mt[i - 1] ^ (mt[i - 1] >> 30)) + i)
        }
    }

    deinit {
        _cdot_Free(mt as! UnsafeMutableRawPtr)
    }

    private def twist() {
        var i: u32  = 0
        var x: u32  = 0
        var xA: u32 = 0

        for ; i < N; ++i {
            x = ((mt[i] & MASK_UPPER) + (mt[(i + 1) % N] & MASK_LOWER))
            xA = x >> 1

            if x & 0x1 != 0 {
                xA ^= A
            }

            mt[i] = mt[(i + M) % N] ^ xA
        }

        index = 0
    }

    def nextInt() -> Int {
        var y: u32
        var i = index

        if index >= N {
            twist()
            i = index
        }

        y = mt[i]
        ++index

        y ^= mt[i] >> U
        y ^= (y << S) & B
        y ^= (y << T) & C
        y ^= y >> L

        return y as Int
    }
}
