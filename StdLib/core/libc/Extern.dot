
@compiletime
module std.libc

public {
    alias void               = builtin.CVoid
    alias char               = u8
    alias int                = i32
    alias unsigned           = u32
    alias short              = i16
    alias unsigned_short     = u16
    alias long               = i64
    alias unsigned_long      = u64
    alias long_long          = i64
    alias unsigned_long_long = u64

    alias size_t             = u64
    alias ssize_t            = i64
    alias off_t              = i64
    alias time_t             = long

    alias void_p             = UnsafeMutableRawPtr
    alias const_void_p       = UnsafeRawPtr

    alias CString            = UnsafePtr<char>
}

declare C {
    @discardableResult
    public def printf(CString, ...) -> int

    @discardableResult
    public def puts(CString) -> int

    @discardableResult
    public def putchar(char) -> int
    public def strlen(CString) -> int

    @discardableResult
    public def memcpy(UnsafeMutableRawPtr, UnsafeRawPtr, size_t) -> UnsafeMutableRawPtr

    @discardableResult
    public def memmove(UnsafeMutableRawPtr, UnsafeRawPtr, size_t) -> UnsafeMutableRawPtr

    public def memcmp(UnsafeRawPtr, UnsafeRawPtr, size_t) -> int
    public def strcmp(CString, CString) -> int

    public def malloc(size_t) -> UnsafeMutableRawPtr 
    public def free(UnsafeMutableRawPtr)
    public def realloc(UnsafeMutableRawPtr, size_t) -> UnsafeMutableRawPtr 

    public def exit(int) -> Never

    public def time(UnsafeMutableRawPtr) -> int
    public def srand(int) 
    public def rand() -> int

    public def isdigit(char) -> int
    public def isalpha(char) -> int
    public def toupper(char) -> char
    public def tolower(char) -> char

    public def sleep(unsigned) -> unsigned
    public def system(CString) -> unsigned

    @discardableResult
    public def signal(signal: i32, handler: @thin (int) -> Void) -> @thin (int) -> Void
    public def raise(signal: i32)
}

namespace stdio {
    enum SeekOrigin {
        /// Beginning of file.
        case SEEK_SET = 0

        /// Current position of the file pointer.
        case SEEK_CUR = 1

        /// End of file.
        case SEEK_END = 2
    }

    alias FilePtr = UnsafeRawPtr

    declare C {
        def fopen(CString, CString) -> FilePtr
        def fdopen(libc.int, CString) -> FilePtr
        def fflush(FilePtr) -> libc.int
        def fclose(FilePtr) -> libc.int

        def fwrite(data: CString, size: libc.size_t,
                   count: libc.size_t, FilePtr) -> libc.size_t
        def fputs(data: CString, file: FilePtr) -> libc.int
        def fread(out: CString, size: libc.size_t,
                  count: libc.size_t, FilePtr) -> libc.size_t

        def fputc(chr: libc.char, FilePtr) -> libc.int
        def fgetc(FilePtr) -> libc.int

        @discardableResult
        def fseek(FilePtr, offset: libc.long, origin: SeekOrigin) -> libc.int
        def ftell(FilePtr) -> libc.long
        def rewind(FilePtr) -> Void

        def tmpfile() -> FilePtr
    }
}

namespace stdlib {
    declare C {
        /// char *getenv( const char *name );
        def getenv(_ name: CString) -> CString
    }
}
