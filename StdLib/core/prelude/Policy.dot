
module std.prelude

public protocol Any {}
public enum Never {}

public alias Void = ()

public alias Bool = i1
public alias Char = u8
public alias Byte = u8

public alias Int    = i64
public alias UInt   = u64

public alias Int128  = i128
public alias UInt128 = u128
public alias Int64  = i64
public alias UInt64 = u64
public alias Int32  = i32
public alias UInt32 = u32
public alias Int16  = i16
public alias UInt16 = u16
public alias Int8   = i8
public alias UInt8  = u8

public alias Float  = f32
public alias Double = f64

public alias default<T>: T = reflect.defaultValue<T>

public {

@_builtin precedenceGroup AssignmentPrecedence {
    associativity: right
    assignment: true
}

@_builtin precedenceGroup TernaryPrecedence {
    associativity: right
    higherThan: AssignmentPrecedence
}

@_builtin precedenceGroup DefaultPrecedence {
    higherThan: TernaryPrecedence
}

@_builtin precedenceGroup LogicalDisjunctionPrecedence {
    associativity: left
    higherThan: TernaryPrecedence
}

@_builtin precedenceGroup LogicalConjunctionPrecedence {
    associativity: left
    higherThan: LogicalDisjunctionPrecedence
}

@_builtin precedenceGroup ComparisonPrecedence {
    higherThan: LogicalConjunctionPrecedence
}

@_builtin precedenceGroup NilCoalescingPrecedence {
    associativity: right
    higherThan: ComparisonPrecedence
}

@_builtin precedenceGroup CastingPrecedence {
    higherThan: NilCoalescingPrecedence
}

@_builtin precedenceGroup RangeFormationPrecedence {
    higherThan: CastingPrecedence
}

@_builtin precedenceGroup AdditionPrecedence {
    associativity: left
    higherThan: RangeFormationPrecedence
}

@_builtin precedenceGroup MultiplicationPrecedence {
    associativity: left
    higherThan: AdditionPrecedence
}

@_builtin precedenceGroup BitwiseShiftPrecedence {
    higherThan: MultiplicationPrecedence
}

@_builtin precedenceGroup ExponentiationPrecedence {
    associativity: left
    higherThan: BitwiseShiftPrecedence
}

postfix ++
postfix --

postfix ()

postfix ?
postfix *

prefix ++
prefix --
prefix !
prefix ~
prefix +
prefix -

@_builtin infix =   : AssignmentPrecedence
@_builtin infix *=  : AssignmentPrecedence
@_builtin infix /=  : AssignmentPrecedence
@_builtin infix %=  : AssignmentPrecedence
@_builtin infix +=  : AssignmentPrecedence
@_builtin infix -=  : AssignmentPrecedence
@_builtin infix <<= : AssignmentPrecedence
@_builtin infix >>= : AssignmentPrecedence
@_builtin infix **= : AssignmentPrecedence
@_builtin infix &=  : AssignmentPrecedence
@_builtin infix ^=  : AssignmentPrecedence
@_builtin infix |=  : AssignmentPrecedence

@_builtin infix ||  : LogicalDisjunctionPrecedence

@_builtin infix &&  : LogicalConjunctionPrecedence

@_builtin infix <   : ComparisonPrecedence
@_builtin infix <=  : ComparisonPrecedence
@_builtin infix >   : ComparisonPrecedence
@_builtin infix >=  : ComparisonPrecedence
@_builtin infix ==  : ComparisonPrecedence
@_builtin infix !=  : ComparisonPrecedence
@_builtin infix === : ComparisonPrecedence
@_builtin infix !== : ComparisonPrecedence
@_builtin infix ~=  : ComparisonPrecedence
@_builtin infix <=> : ComparisonPrecedence

@_builtin infix ??  : NilCoalescingPrecedence

@_builtin infix as  : CastingPrecedence
@_builtin infix as? : CastingPrecedence
@_builtin infix as! : CastingPrecedence

@_builtin infix ..= : RangeFormationPrecedence
@_builtin infix ..  : RangeFormationPrecedence

@_builtin infix +   : AdditionPrecedence
@_builtin infix -   : AdditionPrecedence
@_builtin infix |   : AdditionPrecedence
@_builtin infix ^   : AdditionPrecedence

@_builtin infix *   : MultiplicationPrecedence
@_builtin infix /   : MultiplicationPrecedence
@_builtin infix %   : MultiplicationPrecedence
@_builtin infix &   : MultiplicationPrecedence

@_builtin infix **  : ExponentiationPrecedence

@_builtin infix <<  : BitwiseShiftPrecedence
@_builtin infix >>  : BitwiseShiftPrecedence

protocol ExpressibleByIntegerLiteral {
    init (integerLiteral i: UInt64)
}

protocol ExpressibleByFloatingPointLiteral {
    init (floatingPointLiteral d: Double)
}

protocol ExpressibleByBoolLiteral {
    init (booleanLiteral b: Bool)
}

protocol ExpressibleByCharacterLiteral {
    init (characterLiteral c: Char)
}

} // public

public def copy<T>(_ t: T) -> T where T is class {
    return t
}

public def copy<T>(_ ptr: UnsafePtr<T>) -> UnsafePtr<T> {
    return ptr
}

public def copy<T>(_ ptr: UnsafeMutablePtr<T>) -> UnsafeMutablePtr<T> {
    return ptr
}

public def copy(_ ptr: UnsafeRawPtr) -> UnsafeRawPtr {
    return ptr
}

public def copy(_ ptr: UnsafeMutableRawPtr) -> UnsafeMutableRawPtr {
    return ptr
}
