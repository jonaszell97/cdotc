
import builtin
import libc
import posix
import _sys

@externallyInitialized internal var argc: Int
@externallyInitialized internal var argv: UnsafeBufferPtr<libc.cstring>
@externallyInitialized internal var stackBegin: builtin.RawPointer

internal var programArgs = Array<String>()

/// Get the command line arguments the program was called with.
public def getProgramArguments() -> [String] {
    if argc != programArgs.size {
        programArgs.reserveCapacity(argc)
        for i in 0..argc {
            programArgs.append(String(cstring: UnsafeMutableBufferPtr<Byte>(rawPointer: argv[i])))
        }
    }

    return programArgs
}

/// \return the value of the environment variable `name` if it exists, `none` otherwise.
public def getEnvironmentVariable(_ name: String) -> String? {
    // We need a copy here because unsafeCString is mutating.
    var name = name
    name.ensureNullTerminated()

    var val = libc.stdlib.getenv(name.unsafeCString)
    if val {
        return .Some(String(cstring: val))
    }

    return none
}

/// Shorthand for common exit codes.
enum ExitCode(Int32) {
    case EXIT_SUCCESS = 0
    case EXIT_FAILURE = 1
    case NOT_EXECUTABLE = 126
}

@compiletime
public def exit(_ exitCode: ExitCode = .EXIT_SUCCESS) -> Never {
    libc.stdlib.exit(exitCode.rawValue.value)
    __unreachable
}

@compiletime
public def terminate() -> Never {
    libc.stdlib.exit(ExitCode.EXIT_FAILURE.rawValue.value)
    __unreachable
}

@compiletime
public def abort() -> Never {
    raiseSignal(.SIGABRT)
    __unreachable
}

@compiletime
public def reportFatalError(_ msg: String) -> Never {
    print("fatal error: $msg")
    terminate()
}

enum Signal(builtin.i32) {
    case SIGABRT = 6,
        SIGFPE = 8,
        SIGILL = 4,
        SIGINT = 2,
        SIGSEGV = 11,
        SIGKILL = 9,
}

public def raiseSignal(_ sig: Signal) {
    _ = libc.signal.raise(sig.rawValue)
}

public def setSignalHandler(forSignal sig: Signal, _ handler: @thin (Int32) -> Void) {
    _ = libc.signal.signal(sig.rawValue, 
                           handler as! builtin.RawPointer as! @thin (builtin.i32) -> Void)
}

public def printStackTrace(maxEntries n: Int = 20) {
    // int backtrace (void **buffer, int size)
    let buffer = UnsafeMutableBufferPtr<builtin.MutableRawPointer>.allocate(n)
    let actualSize = libc.execinfo.backtrace(buffer, n.value as libc.int)
    let strings = UnsafeMutableBufferPtr<UnsafeBufferPtr<UInt8>>(rawPointer: 
        libc.execinfo.backtrace_symbols(buffer, actualSize).rawPointer)

    for i in 0..Int(actualSize) {
        _ = libc.stdio.printf("%s\n", strings[i])
    }
}

public def _isPointerOnStack(_ ptr: builtin.RawPointer) -> Bool {
    let value = 0
    let currentStackAddr = builtin.addressOf(value)

    // Stack grows downwards
    return (Bool(builtin.icmp_ult_u64(ptr as! builtin.u64, stackBegin as! builtin.u64))
        && Bool(builtin.icmp_ugt_u64(ptr as! builtin.u64, currentStackAddr as! builtin.u64)))
}

public def getPageSize() -> Int {
    return _sys.getPageSize()
}
