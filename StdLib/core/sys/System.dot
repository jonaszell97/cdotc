
module std.sys

using mem.HeapArray

@_builtin internal var argc: libc.int = 0
@_builtin internal var argv: UnsafePtr<UnsafePtr<libc.char>> = __nullptr

internal var programArgs = [String]()

/// Get the command line arguments the program was called with.
public def getProgramArguments() -> [String] {
    var argc = argc as Int
    if argc != programArgs.size {
        programArgs.reserveCapacity(argc)
        for i in 0..argc {
            programArgs.push(String(rawBytes: argv[i]))
        }
    }

    return programArgs
}

/// Execute the program with the given arguments.
/// @return @code{true} on success, @code{false} on failure.
public def execute(program: String,
                   args: [String],
                   env: [String]? = none,
                   redirects: [String?] = [String?](),
                   memoryLimit: UInt = 0) -> Bool {
    var (success, pid) = posix._execute(program, args, env, redirects, memoryLimit)
    return success
}

/// Execute the program with the given arguments and wait for it to finish.
/// @return The exit code of the program, or @code{-1} on error.
public def executeAndWait(program: String,
                          args: [String],
                          secondsToWait: UInt = 0,
                          env: [String]? = none,
                          redirects: [String?] = [String?](),
                          memoryLimit: UInt = 0) -> Int {
    var (success, pid) = posix._execute(program, args, env, redirects, memoryLimit)
    if success {
        return posix._cdot_Wait(pid,
                                secondsToWait: secondsToWait as libc.unsigned,
                                waitUntilEnd: secondsToWait == 0) as Int
    }

    return -1
}

/// Find an executable by name.
/// @return the path of the executable if found, @code{none} otherwise.
public def findProgramByName(_ name: String,
                             inPaths paths: [String] = [String]()) -> String? {
    if name.empty {
        return none
    }

    var paths = paths

    // Use the given path verbatim if it contains any slashes; this matches
    // the behavior of sh(1) and friends.
    if name.contains(fs.PathSeperator) {
        return .Some(name)
    }

    // If no paths are given, use the system paths.
    if paths.empty {
        paths = String(rawBytes: libc.stdlib.getenv("PATH")).split(at: ':')
    }

    for path in paths {
        var realPath = path.withAppendedPath(name)
        var foundIt = std.fs.canExecute(realPath)

        if foundIt {
            return .Some(realPath)
        }
    }

    return none
}

public alias EXIT_SUCCESS = 0i32
public alias EXIT_FAILURE = 1i32

@compiletime
public def exit(_ exitCode: Int = EXIT_SUCCESS) -> Never {
    libc.exit(exitCode as i32)
}

@compiletime
public def terminate() -> Never {
    libc.exit(EXIT_FAILURE)
}

@compiletime
public def abort() -> Never {
    raiseSignal(.SIGABRT)
    __unreachable
}

@compiletime
public def reportFatalError(_ msg: String) -> Never {
    print("fatal error: $msg")
    terminate()
}

enum Signal(i32) {
    case SIGABRT = 6,
        SIGFPE = 8,
        SIGILL = 4,
        SIGINT = 2,
        SIGSEGV = 11,
        SIGKILL = 9
}

public def raiseSignal(_ sig: Signal) {
    libc.raise(signal: sig as i32)
}

public def setSignalHandler(forSignal sig: Signal, _ handler: @thin (Int32) -> Void) {
    libc.signal(signal: sig as i32, handler)
}

/// @return The systems physical page size in bytes.
@version(POSIX)
public def getPageSize() -> UInt {
    return sys.posix.sysconf(._SC_PAGESIZE) as UInt
}

@version(POSIX) {
    alias RLIMIT_DATA  = 2i32
    alias RLIMIT_STACK = 3i32
    alias RLIMIT_RSS   = 5i32

    struct rlimit {
        var rlim_cur: UInt64
        var rlim_max: UInt64
    }

    declare C def setrlimit(i32, UnsafeMutablePtr<rlimit>) -> i32
    declare C def getrlimit(i32, UnsafeMutablePtr<rlimit>) -> i32

    public def getStackSize() -> (UInt64, UInt64) {
        var rlim = rlimit(rlim_cur: 0, rlim_max: 0)
        if getrlimit(RLIMIT_STACK, builtin.addressOf(&rlim)) != 0 {
            return (0u, 0u)
        }

        return (rlim.rlim_cur, rlim.rlim_max)
    }

    @discardableResult
    public def setMaxStackSize(_ size: UInt64) -> Bool {
        var rlim = rlimit(rlim_cur: size, rlim_max: getStackSize().1)
        if setrlimit(RLIMIT_STACK, builtin.addressOf(&rlim)) != 0 {
            return false
        }

        return true
    }

    public def setMemoryLimit(_ limit: UInt64) {
        var r = rlimit(rlim_cur: 0, rlim_max: 0)
        var limit = limit * 1048576

        // Heap size
        _ = getrlimit(RLIMIT_DATA, builtin.addressOf(&r))
        r.rlim_cur = limit
        _ = setrlimit(RLIMIT_DATA, builtin.addressOf(&r))
        
        // Resident set size.
        _ = getrlimit(RLIMIT_RSS, builtin.addressOf(&r))
        r.rlim_cur = limit
        _ = setrlimit(RLIMIT_RSS, builtin.addressOf(&r))
    }
}
