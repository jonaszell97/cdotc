
import builtin.ops
import fs
import { self, cstring } from libc
import reflect
import sys

/*** Program  ***/

flag_enum! OpenFlags {
    /// Open for reading only.
    case O_RDONLY

    /// Open for writing only.
    case O_WRONLY

    /// Open for reading and writing.
    case O_RDWR

    /// Mask for above modes.
    case O_ACCMODE

    /// No delay.
    case O_NONBLOCK

    /// Set append mode.
    case O_APPEND

    /// Open with shared file lock.
    case O_SHLOCK

    /// Open with exclusive file lock.
    case O_EXLOCK

    /// Signal pgrp when data ready.
    case O_ASYNC

    /// Sync I/O file integrity.
    case O_SYNC

    /// Don't follow symlinks.
    case O_NOFOLLOW

    /// Create if nonexistant.
    case O_CREAT

    /// Truncate to zero length.
    case O_TRUNC

    /// Error if already exists.
    case O_EXCL

    /// Implicitly set FD_CLOEXEC.
    /// \version(Darwin)
    case O_CLOEXEC
}

fileprivate def RedirectIO_PS(_ Path: UnsafePtr<String>,
                              _ FD: Int32,
                              _ FileActions: UnsafeMutablePtr<posix.spawn.posix_spawn_file_actions_t>) -> Bool {
    if !Path {
        return false
    }

    var File: libc.cstring
    if Path->empty {
        File = "/dev/null"
    }
    else {
        // Definitive initialization analysis will not know that this is
        // intialized in the closure.
        File = ""

        var Path = Path.load()
        Path.withCString {
            File = $0.raw as! cstring
        }
    }

    var flags: OpenFlags
    if FD == 0 {
        flags = .O_RDONLY
    }
    else {
        flags = OpenFlags.O_WRONLY | .O_CREAT
    }

    return posix.spawn.posix_spawn_file_actions_addopen(FileActions.raw, FD.value, File,
                                                        flags.rawValue.value as! builtin.i32, 0666) != 0
}

fileprivate def RedirectIO(_ Path: String?, _ FD: Int32) -> Bool {
    if !Path {
        return false
    }

    var Path = Path!
    Path.ensureNullTerminated()

    var File: cstring

    if Path.empty {
        File = "/dev/null"
    }
    else {
        File = Path.unsafeCString.raw as! cstring
    }

    var flags: OpenFlags
    if FD == 0 {
        flags = .O_RDONLY
    }
    else {
        flags = OpenFlags.O_WRONLY | .O_CREAT
    }

    var InFD = posix.fcntl.open(File, Int32(flags.rawValue), 0666)
    if InFD == Int32(-1) {
        return true
    }

    if posix.unistd.dup2(InFD, FD.value) != 0 {
        _ = posix.unistd.close(InFD)
        return true
    }

    _ = posix.unistd.close(InFD)
    return false
}

@version(Darwin)
internal def _execute(_ program: String,
                      _ args: [String],
                      _ env: [String]? = none,
                      _ redirects: [String?] = Array<Option<String>>(),
                      _ memoryLimit: UInt = 0) -> (success: Bool, childID: Int) {
    // We need a mutable copy for creating a c-string.
    var program = program
    program.ensureNullTerminated()

    var argv: UnsafePtr<cstring> = .null
    var envp: UnsafePtr<cstring> = .null

    var argArray = Array<cstring>()
    for arg in args {
        argArray.append(arg.unsafeCString.raw as! cstring)
    }

    argArray.withUnsafeBufferPtr { argv = UnsafePtr<cstring>(rawPointer: $0.raw) }

    if case .Some(let env) = env {
        var envArray = Array<cstring>()
        for arg in env {
            envArray.append(arg.unsafeCString.raw as! cstring)
        }

        envArray.withUnsafeBufferPtr { envp = UnsafePtr<cstring>(rawPointer: $0.raw) }
    }
    else {
        envp = .null
    }

    // Use posix_spawn if there's no memory limit.
    if memoryLimit == 0 {
        var FileActionsStore: posix.spawn.posix_spawn_file_actions_t = default
        var FileActions = UnsafeMutablePtr<posix.spawn.posix_spawn_file_actions_t>.null
        var rawFileActions: builtin.MutableRawPointer<posix.spawn.posix_spawn_file_actions_t> = __nullptr

        // If we call posix_spawn_file_actions_addopen we have to make sure the
        // c strings we pass to it stay alive until the call to posix_spawn,
        // so we copy any StringRefs into this variable.
        var RedirectsStorage: [String; 3] = default

        if !redirects.empty {
            assert!(redirects.size == 3, "expected 3 redirects")
            var RedirectsStr: [UnsafeMutablePtr<String>; 3] = default
            for i in 0..3 {
                if case .Some(let redir) = redirects[i] {
                    RedirectsStorage[i] = redir
                    RedirectsStr[i] = UnsafeMutablePtr<String>(
                        rawPointer: builtin.addressOf(&RedirectsStorage[i]))
                }
            }

            FileActions = UnsafeMutablePtr<posix.spawn.posix_spawn_file_actions_t>(
                rawPointer: builtin.addressOf(&FileActionsStore))

            rawFileActions = FileActions.raw as! builtin.MutableRawPointer<posix.spawn.posix_spawn_file_actions_t>
            _ = posix.spawn.posix_spawn_file_actions_init(rawFileActions)

            // Redirect stdin/stdout.
            if (RedirectIO_PS(RedirectsStr[0], 0, FileActions)
            || RedirectIO_PS(RedirectsStr[1], 1, FileActions)) {
                return (false, 0)
            }

            // Check if stdout and stderr go to the same place.
            var redirectStderr = false
            if case .Some(let stdoutRedir) = redirects[1] {
                if case .Some(let stderrRedir) = redirects[2] {
                    redirectStderr = stdoutRedir != stderrRedir
                }
            }

            if redirectStderr {
                // Just redirect stderr
                if RedirectIO_PS(RedirectsStr[2], 2, FileActions) {
                    return (false, 0)
                }
            }
            else {
                // If stdout and stderr should go to the same place, redirect stderr
                // to the FD already open for stdout.
                var Err = posix.spawn.posix_spawn_file_actions_adddup2(rawFileActions, 1, 2)
                if Err != 0 {
                    return (false, 0)
                }
            }
        }

        if !env {
            // FIXME environ
        }

        var PID: posix.spawn.pid_t = 0
        var Err = posix.spawn.posix_spawn(builtin.addressOf(&PID),
                                          program.unsafeCString,
                                          rawFileActions as! builtin.RawPointer<builtin.RawPointer>,
                                          __nullptr, argv, envp)

        if FileActions {
            _ = posix.spawn.posix_spawn_file_actions_destroy(rawFileActions)
        }

        if Err != 0 {
            return (false, 0)
        }

        return (true, Int(PID))
    }

    var child = posix.unistd.fork()
    match child {
    case Int32(-1):
        return (false, 0)
    case 0:
        // Child process.
        // Redirect file descriptors...
        if !redirects.empty {
            if RedirectIO(redirects[0], 0) {
                return (false, 0)
            }
            if RedirectIO(redirects[1], 1) {
                return (false, 0)
            }

            // Check if stdout and stderr go to the same place.
            var redirectStderr = false
            if case .Some(let stdoutRedir) = redirects[1] {
                if case .Some(let stderrRedir) = redirects[2] {
                    redirectStderr = stdoutRedir != stderrRedir
                }
            }

            if redirectStderr {
                if RedirectIO(redirects[2], 2) {
                    return (false, 0)
                }
            }
            else if posix.unistd.dup2(1, 2) == Int32(-1) {
                return (false, 0)
            }
        }

        if memoryLimit != 0 {
            // sys.setMemoryLimit(memoryLimit)
        }

        var program = program
        program.withCString {
            if envp {
                _ = posix.unistd.execve($0, argv, envp)
            }
            else {
                _ = posix.unistd.execv($0, argv)
            }
        }

        // If the execve() failed, we should exit. Follow Unix protocol and
        // return 127 if the executable was not found, and 126 otherwise.
        // Use _exit rather than exit so that atexit functions and static
        // object destructors cloned from the parent process aren't
        // redundantly run, and so that any data buffered in stdio buffers
        // cloned from the parent aren't redundantly written out.
        // _exit(errno == ENOENT ? 127 : 126)
        posix.unistd._exit(126)
    default:
        break
    }

    return (true, Int(child))
}

@version(Linux)
internal def _execute(_ program: String,
                      _ args: [String],
                      _ env: [String]? = none,
                      _ redirects: [String?] = Array<Option<String>>(),
                      _ memoryLimit: UInt = 0) -> (success: Bool, childID: Int) {
    unimplemented!()
}

/*** File System  ***/

/// Opaque value that represents an open file.
alias FileDescriptor = Int32

/// A file descriptor indicating an error.
alias InvalidFD: FileDescriptor = FileDescriptor(-1)

/// Open the file with the given name for reading. Returns a FileDescriptor describing
/// the file on success, or InvalidFD on error.
@version(Darwin)
def openFileForRead(_ fileName: String) -> FileDescriptor {
    var openFlags = OpenFlags.O_RDONLY
    if reflect.targetInfo.operatingSystem.isDarwin {
        openFlags |= .O_CLOEXEC
    }

    var fileName = fileName
    fileName.ensureNullTerminated()

    return posix.fcntl.open(fileName.unsafeCString, openFlags.rawValue.value as libc.int)
}

@version(Linux)
def openFileForRead(_ fileName: String) -> FileDescriptor {
    unimplemented!()
}

/// Open the file with the given name for writing. Returns a FileDescriptor describing
/// the file on success, or InvalidFD on error.
@version(Darwin)
def openFileForWrite(_ fileName: String,
                     _ flags: fs.OpenFlags,
                     _ mode: Int = 0666) -> FileDescriptor {
    var openFlags = Int(posix.fcntl.O_CREAT)
    if reflect.targetInfo.operatingSystem.isDarwin {
        openFlags |= Int(posix.fcntl.O_CLOEXEC)
    }

    if flags ~ .RW {
        openFlags |= Int(posix.fcntl.O_RDWR)
    }
    else {
        openFlags |= Int(posix.fcntl.O_WRONLY)
    }

    if flags ~ .Append {
        openFlags |= Int(posix.fcntl.O_APPEND)
    }
    if flags ~ .Excl {
        openFlags |= Int(posix.fcntl.O_EXCL)
    }

    var fileName = fileName
    fileName.ensureNullTerminated()

    return FileDescriptor(posix.fcntl.open(fileName.unsafeCString,
                                           openFlags.value as libc.int,
                                           mode.value as libc.int))
}

@version(Linux)
def openFileForWrite(_ fileName: String,
                     _ flags: fs.OpenFlags,
                     _ mode: Int = 0666) -> FileDescriptor {
    unimplemented!()
}

/// Attempt to close the file described by the file descriptor.
/// \return `true` on success, and `false` on error.
@discardableResult
internal def closeFile(_ fd: FileDescriptor) -> Bool {
    return posix.unistd.close(fd.value) == 0
}

/// If the file supports seeking, changes the offset to the given position.
/// Otherwise, returns -1.
internal def seek(_ fd: FileDescriptor, _ off: Int, _ origin: fs.SeekOrigin) -> Int {
    return Int(posix.unistd.lseek(fd, off, Int32(origin.rawValue)))
}

/// Returns the size of the file described by the given file descriptor, or -1 if seeking
/// is not supported.
internal def getFileSize(_ fd: FileDescriptor) -> Int {
    // save current offset
    var off = seek(fd, 0, .SEEK_CUR)

    // move to the end of the file
    var size = seek(fd, 0, .SEEK_END)

    // rewind
    _ = seek(fd, off, .SEEK_SET)

    return Int(size)
}

/// Write count objects of size objSize to the file described by this file handle.
/// The objects will be read from the buffer bytes, which must be at least 
/// n bytes long.
@discardableResult
internal def writeToFile(_ fd: FileDescriptor,
                         _ bytes: cstring,
                         _ n: Int) -> Int {
    return Int(posix.unistd.write(fd, bytes, n))
}

/// Write count objects of size objSize to the file described by this file handle at the specified
/// position, which must be lower than the current value returned by tell().
/// The objects will be read from the buffer bytes, which must be at least 
/// n bytes long.
@discardableResult
internal def writeToFileAtPosition(_ fd: FileDescriptor,
                                   _ bytes: cstring,
                                   _ n: Int,
                                   _ pos: Int) -> Int {
    return Int(posix.unistd.pwrite(fd, bytes, n, pos))
}

/// Read count objects of size objSize to the file described by this file handle.
/// The read objects will be stored in the buffer buf, which must be at least 
/// objSize * count bytes long.
@discardableResult
internal def readFromFile(_ fd: FileDescriptor,
                          _ buf: cstring,
                          _ n: Int) -> Int {
    return posix.unistd.read(fd, buf, n)
}

/// Read count objects of size objSize to the file described by this file handle.
/// The read objects will be stored in the buffer buf, which must be at least 
/// objSize * count bytes long.
@discardableResult
internal def readFromFileAtPosition(_ fd: FileDescriptor,
                                    _ buf: cstring,
                                    _ n: Int,
                                    _ pos: Int) -> Int {
    return posix.unistd.pread(fd, buf, n, pos)
}

/// Returns the current offset of the handle in the file.
internal def currentPosition(_ fd: FileDescriptor) -> Int {
    return Int(seek(fd, 0, .SEEK_CUR))
}

/// Attempt to delete the file with the given name.
/// @return true on failure, false on success.
internal def deleteFile(_ fileName: String) -> Bool {
    var fileName = fileName
    fileName.ensureNullTerminated()

    var result = libc.stdio.remove(fileName.unsafeCString)
    return result < 0
}

/// Check whether or not a file exists and has the specified access permissions.
/// @return true if the file exists, false otherwise.
internal def fileExists(_ fileName: String, _ access: fs.AccessMode) -> Bool {
    var accessKind = posix.unistd.F_OK
    if access ~ .Execute {
        accessKind |= posix.unistd.X_OK
    }
    if access ~ .Read {
        accessKind |= posix.unistd.R_OK
    }
    if access ~ .Write {
        accessKind |= posix.unistd.W_OK
    }

    var fileName = fileName
    fileName.ensureNullTerminated()

    var result = posix.unistd.access(fileName.unsafeCString, accessKind as libc.int)
    return result == 0
}

/// System directory for temporary files.
internal def tempDir() -> String {
    @version(macOS) {
        return sys.getEnvironmentVariable("TMPDIR")!
    }
    else @version(POSIX) {
        return "/tmp/"
    }
    else {
        static_assert(false, "unsupported system")
    }
}

internal let PathSeparator = '/'

/// *** System ***

enum SysConfVariable(Int32) {
    case _SC_PAGESIZE = 29
}

/// \return The systems physical page size in bytes.
public def getPageSize() -> Int {
    return Int(posix.unistd.sysconf(SysConfVariable._SC_PAGESIZE.rawValue))
}

alias RLIMIT_DATA: Int32  = 2
alias RLIMIT_STACK: Int32 = 3
alias RLIMIT_RSS: Int32   = 5

struct rlimit {
    var rlim_cur: UInt64
    var rlim_max: UInt64
}

declare C def setrlimit(Int32, UnsafeMutablePtr<rlimit>) -> Int32
declare C def getrlimit(Int32, UnsafeMutablePtr<rlimit>) -> Int32

public def getStackSize() -> (UInt64, UInt64) {
    var rlim = rlimit(rlim_cur: 0, rlim_max: 0)
    if getrlimit(RLIMIT_STACK, UnsafeMutablePtr(referencing: &rlim)) != 0 {
        return (0u, 0u)
    }

    return (rlim.rlim_cur, rlim.rlim_max)
}

@discardableResult
public def setMaxStackSize(_ size: UInt64) -> Bool {
    var rlim = rlimit(rlim_cur: size, rlim_max: getStackSize().1)
    if setrlimit(RLIMIT_STACK, UnsafeMutablePtr(referencing: &rlim)) != 0 {
        return false
    }

    return true
}

public def setMemoryLimit(_ limit: UInt64) {
    var r = rlimit(rlim_cur: 0, rlim_max: 0)
    var limit = limit * 1048576

    // Heap size
    _ = getrlimit(RLIMIT_DATA, UnsafeMutablePtr(referencing: &r))
    r.rlim_cur = limit
    _ = setrlimit(RLIMIT_DATA, UnsafeMutablePtr(referencing: &r))
    
    // Resident set size.
    _ = getrlimit(RLIMIT_RSS, UnsafeMutablePtr(referencing: &r))
    r.rlim_cur = limit
    _ = setrlimit(RLIMIT_RSS, UnsafeMutablePtr(referencing: &r))
}
