
module std.math

public struct BigInt {
    enum Sign {
        case negative, positive
    }

    alias IntTy    = u32
    alias BufferTy = [IntTy]

    var val: BigUInt
    var sign: Sign { get }

    init (_ val: Int) {
        self.init(integerLiteral: val as UInt)
        if val < 0 {
            sign = .negative
        }
    }

    memberwise init

    def abs() -> BigInt {
        var cpy = self.copy()
        if sign == .negative {
            cpy.negate()
        }

        return cpy
    }

    // Helpers

    def mutating intoZero() {
        val.intoZero()
        sign = .positive
    }

    def mutating intoOne() {
        val.intoOne()
        sign = .positive
    }

    def isZero() -> Bool {
        return val.isZero()
    }

    def isOne() -> Bool {
        return val.isOne() && sign == .positive
    }

    def isSingleWord(_ word: UInt32) -> Bool {
        return val.isSingleWord(word) && sign == .positive
    }

    private def mutating setNumericSignum(_ numericSignum: Int) {
        match numericSignum {
        case -1:
            sign = .negative
        case 0:
        case 1:
            sign = .positive
        default:
            unreachable!("invalid numeric sign!")
        }
    }

    prop signum: Int {
        if isZero() {
            return 0
        }

        match sign {
            case .negative: return -1
            case .positive: return 1
        }
    }
}

// Unary operators
extend BigInt {
    // UnaryPlus
    def prefix +() -> BigInt {
        return self.copy()
    }

    // UnaryMinus
    def prefix -() -> BigInt {
        var cpy = copy()
        cpy.negate()

        return cpy
    }

    def mutating negate() {
        match sign {
        case .negative:
            sign = .positive
        case .positive:
            sign = .negative
        }
    }

    // Not
    def prefix ~() -> BigInt {
        var cpy = self.copy()
        cpy.invert()
        
        return cpy
    }

    def mutating invert() {
        val.invert()
    }

    // Pre-/Post In-/Decrement
    def mutating prefix ++() -> BigInt {
        self += 1
        return self.copy()
    }

    def mutating prefix --() -> BigInt {
        self -= 1
        return self.copy()
    }

    def mutating postfix ++() -> BigInt {
        var cpy = self.copy()
        self += 1

        return cpy
    }

    def mutating postfix --() -> BigInt {
        var cpy = self.copy()
        self -= 1

        return cpy
    }
}

// Addition
extend BigInt {
    def mutating infix +=(rhs: BigInt) {
        if isZero() {
            self = rhs.copy()
            return
        }
        if rhs.isZero() {
            return
        }
        if signum == rhs.signum {
            val += rhs.val
            return
        }

        let cmp = val.mag <=> rhs.val.mag

        // X + -X = 0
        if cmp == 0 {
            intoZero()
            return
        }
        else if cmp > 0 {
            val.mag = BigUInt.subtract(val.mag, rhs.val.mag)
        }
        else {
            val.mag = BigUInt.subtract(rhs.val.mag, val.mag)
        }

        BigUInt.trustedStripLeadingZeroInts(from: &val.mag)
        setNumericSignum(signum * cmp)
    }

    def infix +(rhs: BigInt) -> BigInt {
        var result = self.copy()
        result += rhs

        return result
    }
}

// Subtraction
extend BigInt {
    def mutating infix -=(rhs: BigInt) {
        if rhs.isZero() {
            return
        }
        if isZero() {
            self = -rhs
            return
        }
        if signum != rhs.signum {
            val.mag = BigUInt.add(val.mag, rhs.val.mag)
            return
        }

        let cmp = val.mag <=> rhs.val.mag
        if cmp == 0 {
            intoZero()
            return
        }
        else if cmp > 0 {
            val.mag = BigUInt.subtract(val.mag, rhs.val.mag)
        }
        else {
            val.mag = BigUInt.subtract(rhs.val.mag, val.mag)
        }

        BigUInt.trustedStripLeadingZeroInts(from: &val.mag)
        setNumericSignum(signum * cmp)
    }

    def infix -(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy -= rhs

        return cpy
    }
}

// Multiplication
extend BigInt {
    def mutating infix *=(rhs: BigInt) {
        var resultSign: Sign
        if sign == rhs.sign {
            resultSign = .positive
        }
        else {
            resultSign = .negative
        }

        val *= rhs.val
        sign = resultSign
    }

    def infix *(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy *= rhs

        return cpy
    }

    // Exp
    def mutating infix **=(exponent: UInt) {
        var newSign = if signum < 0 && exponent & 1 == 1 then -1 else 1
        val **= exponent

        setNumericSignum(newSign)
    }

    def infix **(exponent: UInt) -> BigInt {
        var cpy = self.copy()
        cpy **= exponent

        return cpy
    }

    def mutating square() {
        val.square()
        sign = .positive
    }
}

// Division & Remainder
extend BigInt {
    // Division
    def mutating infix /=(rhs: BigInt) {
        var resultSign: Sign
        if sign == rhs.sign {
            resultSign = .positive
        }
        else {
            resultSign = .negative
        }

        val /= rhs.val
        sign = resultSign
    }

    def infix /(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy /= rhs

        return cpy
    }

    // Remainder & Modulo
    def mutating infix %=(rhs: BigInt) {
       val %= rhs.val
    }

    def infix %(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy %= rhs

        return cpy
    }

    def rem(_ rhs: BigInt) -> BigInt {
        return BigInt(val: val.rem(rhs.val), sign: sign)
    }

    def divRem(_ rhs: BigInt) -> (BigInt, BigInt) {
        var pair = val.divRem(rhs.val)
        return (BigInt(val: pair.0.copy(),
                       sign: if sign == rhs.sign then Sign.positive
                             else .negative),
                BigInt(val: pair.1.copy(), sign: sign))
    }
}

// Bitwise ops
extend BigInt {
    // And
    def mutating infix &=(rhs: BigInt) {
        val &= rhs.val
    }

    def infix &(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy &= rhs

        return cpy
    }

    // Or
    def mutating infix |=(rhs: BigInt) {
        val |= rhs.val
    }

    def infix |(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy |= rhs

        return cpy
    }

    // Xor
    def mutating infix ^=(rhs: BigInt) {
        val ^= rhs.val
    }

    def infix ^(rhs: BigInt) -> BigInt {
        var cpy = self.copy()
        cpy ^= rhs

        return cpy
    }

    // Shl
    def mutating infix <<=(n: Int) {
        val <<= n
    }

    def infix <<(n: Int) -> BigInt {
        var cpy = self.copy()
        cpy <<= n

        return cpy
    }

    // Shr
    def mutating infix >>=(n: Int) {
        logicalShiftRight(by: n)
    }

    def infix >>(n: Int) -> BigInt {
        var cpy = self.copy()
        cpy >>= n

        return cpy
    }

    private def mutating logicalShiftRight(by n: Int) {
        if n == 0 {
            return
        }
        if n < 0 {
            return val.shiftLeft(by: -n)
        }

        var nInts = n >> 5
        var nBits = (n & 0x1f) as IntTy
        var magLen = val.mag.size

        // Special case: entire contents shifted off the end
        if nInts >= magLen {
            match sign {
            case .positive:
                self.intoZero()
            case .negative:
                self = BigInt(-1i)
            }
            
            return
        }

        val.shiftRight(by: n as Int)

        if sign == .negative {
            // Find out whether any one-bits were shifted off the end.
            var onesLost = false
            var i = magLen - 1
            var j = magLen - nInts
            for ; i >= j && !onesLost; i-- {
                onesLost = (val.mag[i] != 0)
            }

            if !onesLost && nBits != 0 {
                onesLost = val.mag[magLen - nInts - 1] << (32u32 - nBits) != 0
            }

            if onesLost {
                val.cdotIncrement(&val.mag)
            }
        }
    }
}

// Operators with single word rhs
extend BigInt {
    private macro int_binary_op{
        ($($op:tok)*) => {
            $(
                def mutating infix ${$op=}<T>(rhs: T) where IsIntegral<T> {
                    static if IsSigned<T> {
                        var rhsVal = BigInt(rhs as Int)
                    }
                    else {
                        var rhsVal = BigInt(integerLiteral: rhs as UInt)
                    }

                    self ${$op=} rhsVal
                }

                def infix $op<T>(rhs: T) -> BigInt where IsIntegral<T> {
                    var cpy = self.copy()
                    cpy ${$op=} rhs

                    return cpy
                }
            )...
        }
    }

    int_binary_op!{ + - * / % & | ^ }
}

extend BigInt with ExpressibleByIntegerLiteral {
    init (integerLiteral val: UInt64 = 0u) {
        self.sign = .positive
        self.val  = BigUInt(integerLiteral: val)
    }
}

extend BigInt {
    init? (_ s: String) {
        self.init(s, radix: 10u)
    }

    init? (_ s: String, radix: UInt) {
        if s.empty {
            return none
        }

        self.init(integerLiteral: 0u)

        var i = 0
        var neg = false
        if s.first! == '-' {
            ++i
            neg = true

            if i == s.size {
                return none
            }
        }

        // figure out if we can shift instead of multiply
        var shift = (if radix == 16 then 4
                     else (if radix == 8 then 3
                           else (if radix == 2 then 1 else 0)))

        var slen = s.size
        for ; i < slen; ++i {
            print(val.mag)
            if s[i] == '_' {
                continue
            }

            var val = BigUInt.getDigitValue(of: s[i].ascii, radix)
            if (val as UInt) >= radix {
                return none
            }

            if shift != 0 {
                self <<= shift
            }
            else {
                self *= radix
            }

            self += val
        }

        if neg {
            sign = .negative
        }
    }
}

extend BigInt with Comparable {
    def infix <=>(rhs: BigInt) -> Int {
        if self.sign == rhs.sign {
            return signum * (val <=> rhs.val)
        }

        return if signum > rhs.signum then 1 else -1
    }
}

extend BigInt with Randomizable {
    static def random() -> BigInt {
        return random(withMaxLength: 64)
    }

    static def random(withMaxLength maxLength: UInt) -> BigInt {
        var sign = if Bool.random() then Sign.positive else .negative
        var val = BigUInt.random(withMaxLength: maxLength)

        return BigInt(val, sign)
    }
}

extend BigInt with Copyable {
    def copy() -> BigInt {
        return BigInt(val: val.copy(), sign: sign.copy())
    }
}

extend BigInt with Hashable {
    def hashValue() -> UInt {
        return val.hashValue() * (signum as UInt)
    }
}

extend BigInt with StringRepresentable {
    def toString() -> String {
        return toString<10>()
    }

    def toString<let Base>() -> String {
        var s = ""
        if sign == .negative {
            s += "-"
        }

        s += val.toString<Base>()
        return s
    }
}