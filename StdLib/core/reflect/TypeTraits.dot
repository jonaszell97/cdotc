
// struct defer<...Args> {
//     let fn: (Args...) -> Void
//     let ...args: Args...

//     deinit {
//         (fn)(args...)
//     }
// }

// alias Arity: Int             = 0
// alias Arity<T, ...Rest>: Int = Arity<Rest...> + 1

// alias TypeAt<let Idx>             = Void
// alias TypeAt<let Idx, T, ...Rest> = T                        where Idx == 0
// alias TypeAt<let Idx, T, ...Rest> = TypeAt<Idx - 1, Rest...> where Idx != 0
