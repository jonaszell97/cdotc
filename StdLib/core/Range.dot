
/// Half-open range formation.
postfix ..

public protocol RangeExpression {
    /// The Bound type of the range.
    associatedType Bound: Comparable

    /// The lower bound of the range.
    prop lowerBound: Bound { get }

    /// The upper bound of the range.
    prop upperBound: Bound { get }
}

extend RangeExpression with RandomAccessCollection where Bound is Strideable
                                                   where Bound is BinaryInteger {
    /// \inherit
    default alias Element = Bound

    /// \inherit
    default alias Index = Bound

    /// \inherit
    default prop startIndex: Index => lowerBound

    /// \inherit
    default prop endIndex: Index => upperBound

    /// \inherit
    default alias SubSequence = Self

    /// \inherit
    default subscript (range: Range<Index>) -> SubSequence {
        return range
    }
}

extend RangeExpression where Self is RandomAccessCollection
                       where Bound is Equatable {
    /// Provide matching ability.
    def infix ~= (_ rhs: Bound) -> Bool {
        return self.contains(rhs)
    }
}

public struct Range<_Bound: Comparable> {
    /// The first value in the range.
    var _lowerBound: _Bound

    /// The last value in the range.
    let _upperBound: _Bound

    /// Memberwise C'tor.
    public init (from: _Bound, to: _Bound) {
        _lowerBound = from
        _upperBound = to
    }
}

extend Range with RangeExpression {
    /// \inherit
    alias Bound = _Bound

    /// \inherit
    prop lowerBound: Bound { return _lowerBound }

    /// \inherit
    prop upperBound: Bound { return _upperBound }

    /// \inherit
    subscript (idx: Index) -> Element {
        _checkIndex(idx)
        return idx
    }
}

public struct InclusiveRange<_Bound: Comparable> {
    /// The first value in the range.
    var _lowerBound: _Bound

    /// The last value in the range.
    let _upperBound: _Bound

    /// Memberwise C'tor.
    public init (from: _Bound, to: _Bound) {
        _lowerBound = from
        _upperBound = to
    }
}

extend InclusiveRange with RangeExpression where _Bound is Strideable {
    /// \inherit
    alias Bound = _Bound

    /// \inherit
    prop lowerBound: Bound { return _lowerBound }

    /// \inherit
    prop upperBound: Bound { return _upperBound.advanced(by: 1) }

    /// \inherit
    subscript (idx: Index) -> Element {
        _checkIndex(idx)
        return idx
    }
}

public struct HalfOpenRange<_Bound: Comparable> {
    /// The first value in the range.
    var _lowerBound: _Bound

    /// Memberwise C'tor.
    public init (from _lowerBound: _Bound) {
        self._lowerBound = _lowerBound
    }
}

extend HalfOpenRange with RangeExpression where _Bound is Strideable
                                          where _Bound is FixedWidthInteger {
    /// \inherit
    alias Bound = _Bound

    /// \inherit
    prop lowerBound: Bound { return _lowerBound }

    /// \inherit
    prop upperBound: Bound { return Bound.max }

    /// \inherit
    subscript (idx: Index) -> Element {
        _checkIndex(idx)
        return idx
    }
}

public def infix ..= <T: Comparable>(from: T, to: T) -> InclusiveRange<T> {
    return InclusiveRange(from, to)
}

public def infix .. <T: Comparable>(from: T, to: T) -> Range<T> {
    return Range(from, to)
}

public def postfix .. <T: Comparable>(from: T) -> HalfOpenRange<T> {
    return HalfOpenRange(from)
}
