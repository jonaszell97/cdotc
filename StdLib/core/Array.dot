
public alias DefaultArrayLiteralType<T> = Array<T>

public protocol ExpressibleByArrayLiteral {
    associatedType Element
    init (arrayLiteral: [Element])
}

public struct Array<T> {
    // TODO!
}

extend Array with RangeReplaceableCollection {
    /// \inherit
    associatedType Element = T

    /// \inherit
    associatedType Index = Int

    /// \inherit
    associatedType SubSequence = Self

    /// \inherit
    prop size: Int {
        unimplemented!()
    }

    /// \inherit
    prop capacity: Int {
        unimplemented!()
    }

    /// \inherit
    prop startIndex: Index {
        return 0
    }

    /// \inherit
    prop endIndex: Index {
        return size
    }

    /// \inherit
    subscript (idx: Index) -> Element {
        get {
            _checkIndex(idx)
            unimplemented!()
        }
        set {
            _checkIndex(idx)
            unimplemented!()
        }
    }

    /// \inherit
    subscript (_ range: Range<Index>) -> SubSequence {
        get {
            unimplemented!()
        }
        set {
            unimplemented!()
        }
    }

    /// \inherit
    def mutating replaceSubrange<C: Collection>(
        _ subRange: Range<Index>, with newElements: C
    ) where C.Element == Element {
        unimplemented!()
    }
}

extend Array {
    /// Execute the given closure with a pointer to the beginning of this array's buffer.
    def withUnsafeBufferPtr<U>(_ closure: (UnsafeBufferPtr<T>) -> U) -> U {
        unimplemented!()
    }

    /// Execute the given closure with a pointer to the beginning of this array's buffer.
    def mutating withUnsafeMutableBufferPtr<U>(_ closure: (UnsafeMutableBufferPtr<T>) -> U) -> U {
        unimplemented!()
    }
}
