
internal let alphaNumeric: [builtin.u8; ?] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

internal let printable: [builtin.u8; ?] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`$&%<>|()[]{}+-/*\n?!#=\"';,.:"

/// \return a random alpha numeric character.
internal def randomAlphaNumeric() -> Character {
    let size = UInt8(truncatingIfNeeded: elementCount(alphaNumeric))
    return Character(ascii: alphaNumeric[Byte.random() % size])
}

/// \return a random alpha numeric string of length `len`.
internal def randomAlphaNumeric(withLength len: Int) -> String {
    var str = String(withInitialCapacity: len)
    for _ in 0..len {
        str.append(randomAlphaNumeric())
    }

    return str
}

/// \return a random printable character.
internal def randomPrintable() -> Character {
    let size = UInt8(truncatingIfNeeded: elementCount(printable))
    return Character(ascii: printable[Byte.random() % size])
}

/// \return a random printable string of length \param len.
internal def randomPrintable(withLength len: Int) -> String {
    var str = String(withInitialCapacity: len)
    for _ in 0..len {
        str.append(randomPrintable())
    }

    return str
}

extend Character {
    /// \return a random alpha numeric character.
    static def randomAlphaNumeric() -> Character {
        return core.randomAlphaNumeric()
    }

    /// \return a random printable character.
    static def randomPrintable() -> Character {
        return core.randomPrintable()
    }
}

extend String {
    /// \return a random alpha numeric string of length `len`.
    static def randomAlphaNumeric(withLength len: Int) -> String {
        return core.randomAlphaNumeric(withLength: len)
    }

    /// \return a random printable string of length `len`.
    static def randomPrintable(withLength len: Int) -> String {
        return core.randomPrintable(withLength: len)
    }
}

/*
enum ASCII(Byte) {
    case nul = '\0',
        soh,
        stx,
        etx,
        eot,
        enq,
        ack,
        bel,
        bs,
        tab,
        lf,
        vt,
        ff,
        cr,
        so,
        si,
        dle,
        dc1, dc2, dc3, dc4,
        nak,
        syn,
        etb,
        can,
        em,
        sub,
        esc,
        fs,
        gs,
        rs,
        us,
        ` `,
        `!`,
        `"`,
        `#`,
        `$`,
        `%`,
        `&`,
        `'`,
        `(`,
        `)`,
        `*`,
        `+`,
        `,`,
        `-`,
        `.`,
        `/`,
        `0`,
        `1`,
        `2`,
        `3`,
        `4`,
        `5`,
        `6`,
        `7`,
        `8`,
        `9`,
        `:`,
        `;`,
        `<`,
        `=`,
        `>`,
        `?`,
        `@`,
        A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
        `[`,
        `\`,
        `]`,
        `^`,
        `_`,
        backtick,
        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z,
        `{`,
        `|`,
        `}`,
        `~`,
        del
}

*/