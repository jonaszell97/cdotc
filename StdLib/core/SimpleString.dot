
import { fnv1a } from algorithm.hashing
import { Atomic } from atomic
import builtin
import libc
import math
import mem
import reflect

/// The default string type used by the compiler for string literals.
public alias DefaultStringLiteralType = String

public protocol StringRepresentable {
    def toString() -> String
}

public protocol StringInitializable {
    init? (_ s: String)
}

public protocol ExpressibleByStringLiteral {
    init (stringLiteral s: String)
}

// Since the default assert macro uses strings, we can't use it to report failures in String itself.
private macro _string_assert(
    ($cond:any, $msg:expr) => {
        static if reflect.debug {
            if !($cond) {
                _ = libc.stdio.printf("[21;31massertion failed:%s\n", stringify!($cond) as libc.cstring)
            }
        }
    }
)

private macro _string_precondition(
    ($cond:any, $msg:expr) => {
        if !($cond) {
            _ = libc.stdio.printf("[21;31mprecondition failed:%s\n", stringify!($cond) as libc.cstring)
        }
    },
    ($cond:any) => {
        if !($cond) {
            _ = libc.stdio.printf("[21;31mprecondition failure%s\n")
        }
    }
)

@_builtin @compiletime @testable
public struct String with ExpressibleByStringLiteral {
    /// The owned mask.
    static let OwnedMask    = 1 << 63

    /// The capacity mask.
    static let CapacityMask = (Int(Int32(-1)) << 32) & ~OwnedMask

    /// The size mask.
    static let SizeMask     = Int(Int32(-1))

    /// Default capacity to allocate when growing from zero.
    static let DefaultCapacity = 32

    /// The underlying storage of this string.
    fileprivate var storage: (Int, Int)

    /// Empty c'tor.
    init {
        storage = (0, 0)
    }

    /// Initialize from a static string. This is only called by the compiler
    /// when the lifetime of the buffer is guaranteed to exceed the lifetime of
    /// this string.
    @_builtin("String.init(staticString:size:)")
    private init (staticString bytes: libc.cstring, size: builtin.i64) {
        self.storage = (Int(builtin.ptrtoint(bytes)), 0)
        self.byteSize = Int(size)
        self.storageIsOwned = false
        self.byteCapacity = 0

        rt._register_allocation!(bytes, size)
    }

    /// ExpressibleByStringLiteral requirement.
    init (stringLiteral s: String) {
        self = s
    }

    /// Initialize from a single character.
    init (singleCharacter c: Character) {
        self.init()

        var asciiVal = c.ascii
        self.uncheckedInsert(UnsafeBufferPtr<UInt8>(referencing: &asciiVal), 1, at: 0)
    }

    /// C'tor. Initialize from externally allocated bytes whose lifetime must exceed the lifetime
    /// of this string.
    @_builtin("String.init(cstring:size:)")
    init (cstring bytes: UnsafeBufferPtr<Byte>, size: Int = -1) {
        var size = size
        var rawBytes = bytes.rawPointer as! libc.cstring

        if size == -1 {
            size = Int(libc.string.strlen(bytes))
        }

        self.init(staticString: rawBytes, size: size.value)
    }

    /// Initialize a substring.
    init (_ str: String, bounds: Range<Int>) {
        self.init()
        uncheckedInsert(str.rawBytes.offset(by:bounds.startIndex), bounds.size, at: 0)
    }

    /// Initialize from any String representable value.
    init<T: StringRepresentable> (_ t: borrow T) {
        self = t.toString()
    }

    /// Memberwise C'tor.
    private memberwise init

    /// D'tor.
    deinit {
        if !storageIsOwned {
            return
        }

        debugPrint!(Strings, "deinitializing string '%s' %p (self %p)\n", rawBytes.raw, rawBytes.raw, builtin.addressOf(self))
        var _c = rawBytes.raw as! libc.cstring
        rawBytes.deallocate()
    }

    /// \return the raw bytes of this string.
    prop rawBytes: UnsafeBufferPtr<Byte> {
        get {
            return UnsafeBufferPtr<Byte>(rawValue: storage.0)
        }
        private set {
            storage.0 = newVal.rawValue
        }
    }

    /// \return the raw bytes of this string.
    private prop mutableBytes: UnsafeMutableBufferPtr<Byte> => UnsafeMutableBufferPtr<Byte>(rawValue: storage.0)

    /// \return the byte size of this string.
    prop byteSize: Int {
        get {
            return storage.1 & SizeMask
        }
        set {
            // Clear the size.
            storage.1 &= ~SizeMask

            // Set the new size.
            storage.1 |= (newVal & SizeMask)
        }
    }

    /// \return the byte capacity of this string.
    prop byteCapacity: Int {
        get {
            return (storage.1 & CapacityMask) >> 32
        }
        set {
            // Clear the size.
            storage.1 &= ~CapacityMask

            // Set the new size.
            storage.1 |= ((newVal << 32) & CapacityMask)
        }
    }

    /// \return `true` iff this string owns its storage.
    prop storageIsOwned: Bool {
        get {
            return storage.1 & OwnedMask != 0
        }
        set {
            if newVal {
                storage.1 |= OwnedMask
            }
            else {
                storage.1 &= ~OwnedMask
            }
        }
    }

    /// FIXME
    prop isAscii: Bool => true

    /// Append the contents of \param str to this string.
    @_builtin("String.infix +=(_:)")
    def mutating infix += (str: String) {
        uncheckedInsert(str.rawBytes, str.byteSize, at: endIndex)
    }

    /// Turn this buffer into an isOwned buffer, if it is not already one.
    def mutating makeOwned(ensuringCapacity minCapacity: Int = 0) {
        var minCapacity = minCapacity
        if minCapacity == 0 {
            minCapacity = math.max(DefaultCapacity, math.closestPowerOfTwo(roundingUp: byteSize))
        }

        // Allocate storage.
        var buffer = UnsafeMutableBufferPtr<Byte>.allocate(minCapacity)
        debugPrint!(Strings, "creating owned string '%s' (%p) (self %p)\n", rawBytes.raw, buffer.raw, builtin.addressOf(self))

        // Copy existing bytes.
        mem.copy(to: buffer, from: rawBytes, byteSize)

        // Remember previous size.
        var prevSize = byteSize

        // Mark memory as owned.
        self.rawBytes = buffer
        self.storageIsOwned = true
        self.byteSize = prevSize
        self.byteCapacity = minCapacity
    }

    /// Grow this buffer to be able to store at least the given number of bytes.
    def mutating grow(toAtLeast n: Int) {
        if n <= byteCapacity {
            return
        }

        var growTo = math.closestPowerOfTwo(roundingUp: n)
        if !storageIsOwned {
            return makeOwned(ensuringCapacity: growTo)
        }

        // Reallocate to make sure there is enough storage.
        var prev = self.rawBytes.rawPointer
        self.rawBytes = mem.reallocate(mutableBytes, toSize: growTo)
        debugPrint!(Strings, "realloc %p -> %p (self: %p)\n", prev, rawBytes.raw, builtin.addressOf(self))
        self.byteCapacity = growTo
    }

    /// Insert the given raw bytes into the buffer at the specified position,
    /// these must be valid UTF8.
    def mutating uncheckedInsert(_ bytes: UnsafeBufferPtr<Byte>,
                                 _ size: Int,
                                 at position: Int) {
        grow(toAtLeast: byteSize + size)

        if position != byteSize {
            // Move the following elements.
            mem.move(to: self.mutableBytes.offset(by: position + size),
                     from: self.rawBytes.offset(by: position),
                     size)
        }

        mem.copy(to: self.mutableBytes.offset(by: position), from: bytes, size)
        self.byteSize = self.byteSize + size
    }

    /// Replace a subrange with a different byte sequence of the same size.
    def mutating uncheckedReplace(from index: Int, with bytes: UnsafeBufferPtr<Byte>, size n: Int) {
         _string_assert!(index + n <= byteSize, "subrange is out of bounds!")
        mem.copy(to: self.mutableBytes.offset(by: index), from: bytes, n)
    }

    /// Remove \param n bytes following \param position.
    def mutating remove(count n: Int64, at position: Int64) {
         _string_assert!(position + n < byteSize, "bad remove parameters")

        /// Copy all following bytes behind by n bytes.
        mem.move(to: self.mutableBytes.offset(by: position),
                 from: self.rawBytes.offset(by: position + n),
                 n)

        /// Reduce our size.
        byteSize = byteSize - n
    }

    /// Reverse the bytes in the buffer.
    def mutating reverse(fromIndex position: Int) {
        mem.reverse(self.mutableBytes.offset(by: position), self.byteSize - position)
    }

    /// Clear the storage buffer.
    def mutating clear() {
        byteSize = 0
    }
}

extend String {
    /// Ensure that the last character in this string is a NUL.
    public def mutating ensureNullTerminated() {
        if byteCapacity <= byteSize + 1 {
            self.grow(toAtLeast: byteSize + 1)
        }

        // We can't use String's own subscript here since the index is technically out-of-bounds.
        mutableBytes[byteSize] = '\0'
    }

    /// \return a NUL terminated c string of this string.
    internal prop unsafeCString: UnsafeBufferPtr<Byte> {
        _string_precondition!(mutableBytes[byteSize] == '\0', "not a C-String!")
        return rawBytes
    }

    /// Execute the passed closure with a pointer to a NUL-terminated C-String.
    /// \return the return value of the closure.
    public def mutating withCString<T>(closure: (UnsafeBufferPtr<Byte>) -> T) -> T {
        self.ensureNullTerminated()
        return closure(self.rawBytes)
    }
}

extend String {
    struct ASCIIView with Iterable, IteratorProtocol {
        /// The String that this view is for.
        internal var str: String

        /// The current index into the ascii buffer.
        internal var idx: Int

        /// C'tor.
        init (_ str: String) {
            self.str = str
            self.idx = 0
        }

        /// \inherit
        alias Element = Byte

        /// \inherit
        public def mutating next() -> Byte? {
            if idx == str.byteSize {
                return none
            }

            var c = str.rawBytes[idx]
            idx += 1

            return .Some(c)
        }

        /// \inherit
        alias It = Self

        /// \inherit
        public def getIterator() -> Self {
            return self.copy()
        }
    }

    /// \return an ASCII view of this string's contents.
    prop ascii: ASCIIView {
        return ASCIIView(self)
    }
}

extend String with RangeReplaceableCollection {
    /// \inherit
    alias Element = Character

    /// \inherit
    alias Index = Int

    /// \inherit
    alias SubSequence = Self

    /// \inherit
    prop size: Int {
        if likely(isAscii) {
            return byteSize
        }

        unreachable!("unimplemented")
    }

    /// \inherit
    prop capacity: Int {
        if likely(isAscii) {
            return byteCapacity
        }

        unreachable!("unimplemented")
    }

    /// \inherit
    prop startIndex: Index {
        return 0
    }

    /// \inherit
    prop endIndex: Index {
        return size
    }

    /// \inherit
    def mutating reserveCapacity(_ n: Int) {
        grow(toAtLeast: n)
    }

    /// \inherit
    subscript (idx: Index) -> Element {
        get {
            _checkIndex(idx)
            if isAscii {
                return Character(ascii: rawBytes[idx])
            }

            unimplemented!()
        }
        set {
            _checkIndex(idx)
            if isAscii {
                return mutableBytes[idx] = newVal.ascii
            }

            unimplemented!()
        }
    }

    /// \inherit
    subscript (_ range: Range<Index>) -> SubSequence {
        get {
            return String(self, bounds: range)
        }
        set {
            if range.size == newVal.size {
                uncheckedReplace(from: range.startIndex, with: newVal.rawBytes, size: range.size)
                return
            }

            replaceSubrange(range, with: newVal)
        }
    }

    /// \inherit
    def mutating replaceSubrange<C: Collection>(
        _ subRange: Range<Index>, with newElements: owned C
    ) where C.Element == Element {
        _string_precondition!(subRange.startIndex >= self.startIndex && subRange.endIndex <= self.endIndex, 
                              "invalid indices passed to String.replaceSubrange")

        var result = String()

        if subRange.startIndex > 0 {
            result += self[0..subRange.startIndex]
        }

        result += newElements

        if subRange.endIndex < self.endIndex {
            result += self[subRange.endIndex..self.endIndex]
        }

        self = result
    }

    /// \inherit
    def mutating append(_ newElement: owned Character) {
        var ascii = newElement.ascii
        uncheckedInsert(UnsafeBufferPtr<Byte>(rawPointer: builtin.addressOf(ascii)), 1, at: byteSize)
    }

    /// Concatenate two strings.
    def infix +(_ rhs: String) -> String {
        var cpy = self.copy()
        cpy += rhs
        return cpy
    }

    /// Concatenate a string with a string representable object.
    def infix + <T: StringRepresentable>(_ rhs: T) -> String {
        var cpy = self.copy()
        cpy += rhs.toString()
        return cpy
    }
}

extend String {
    /// \return a sub-sequence of this string at the given offset and
    /// with the given length.
    def mutating substr(from offset: Index = 0,
                        length: Int = .max) -> String {
        if offset >= byteSize {
            return ""
        }

        var len = math.min(byteSize - offset, length)
        var to = startIndex + len

        return self[offset..to]
    }

    def levenshteinDistance(to str: String) -> Int {
        if empty { return str.size }
        if str.empty { return size }

        let cost = if self[0] == str[0] then 0 else 1
        return math.min(
            self.dropFirst().levenshteinDistance(to: str) + 1,
            self.levenshteinDistance(to: str.dropFirst()) + 1,
            self.dropFirst().levenshteinDistance(to: str.dropFirst()) + cost)
    }
}

extend String with ImplicitlyCopyable {
    /// \inherit
    def copy() -> Self {
        var result = String()
        result += self
        return result
    }
}

extend String with StringInitializable {
    /// \inherit
    init? (_ s: String) {
        self = s
    }
}

extend String with StringRepresentable {
    /// \inherit
    def toString() -> String {
        return self.copy()
    }
}

extend String with Hashable {
    def hashValue() -> UInt {
        return fnv1a(self)
    }
}
