
module std.variant

public macro Union {
    (union $Name:ident {
        $(var $Field:ident: $Type:any)+
    }) => {
        struct $Name {
            // Calculate needed size.
            private alias NeededSize = MaxSize<$($Type,)...>

            /// Opaque buffer of the needed size.
            private var buffer: [Byte; NeededSize]

            // Create accessors and initializers for every type.
            $(
                /// C'tor.
                init ($Field: $Type) {
                    self.buffer = [Byte; NeededSize]()
                    self.$Field = $Field
                }

                /// \return the union interpreted as a value of type $Type.
                public prop $Field: $Type {
                    get {
                        return builtin.loadFromPointer(
                            builtin.reinterpretCast<$Type>(self.buffer as! UnsafePtr<Byte>))
                    }
                    set {
                        builtin.storeToPointer(
                            newVal,
                            to: builtin.reinterpretCast<$Type>(self.buffer as! UnsafeMutablePtr<Byte>))
                    }
                }
            )...
        }
    }
}