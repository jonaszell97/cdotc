
module std.unsafe

prefix *

struct UnsafePtr<T> {
    /// The raw pointer value.
    internal var rawValue: builtin.RawPointer<T>

    /// Empty C'tor. Initializes to a null pointer.
    init {
        self.rawValue = 0 as! builtin.RawPointer<T>
    }

    /// C'tor. Bitcasts from an unsigned integer of pointer size.
    init (bitPattern: UInt) {
        self.rawValue = 0 as! builtin.RawPointer<T>
    }

    /// C'tor. Initialize from a reference.
    init (referencing reference: borrow T) {
        self = builtin.addressOf(reference)
    }

    /// C'tor. Initialize from a mutable pointer.
    init (_ ptr: UnsafeMutablePtr<T>) {
        self.rawValue = ptr.rawValue
    }

    /// Load the value at the address of this pointer.
    /// \return the value at the stored address.
    def load() -> T {
        return builtin.loadFromPointer(self.rawValue)
    }

    /// Convenience operator for loading the value of this pointer.
    /// \return the value at the stored address.
    def prefix *() -> T {
        return load()
    }
}

struct UnsafeRawPtr {
    /// The raw pointer value.
    internal var rawValue: builtin.RawPointer

    /// Empty C'tor. Initializes to a null pointer.
    init {
        self.rawValue = 0 as! builtin.RawPointer
    }

    /// C'tor. Bitcasts from an unsigned integer of pointer size.
    init (bitPattern: UInt) {
        self.rawValue = 0 as! builtin.RawPointer
    }

    /// C'tor. Initialize from a reference.
    init <T>(referencing reference: borrow T) {
        self = builtin.addressOf(reference) as! builtin.RawPointer
    }

    /// C'tor. Initialize from a typed pointer.
    init <T>(_ ptr: UnsafePtr<T>) {
        self.rawValue = ptr.rawValue as! builtin.RawPointer
    }

    /// C'tor. Initialize from a mutable typed pointer.
    init <T>(_ ptr: UnsafeMutablePtr<T>) {
        self.rawValue = ptr.rawValue as! builtin.RawPointer
    }

    /// C'tor. Initialize from a raw mutable pointer.
    init (_ ptr: UnsafeMutableRawPtr) {
        self.rawValue = ptr.rawValue
    }
}

struct UnsafeMutablePtr<T> {
    /// The raw pointer value.
    internal var rawValue: builtin.RawPointer<T>

    /// Empty C'tor. Initializes to a null pointer.
    init {
        self.rawValue = 0 as! builtin.RawPointer<T>
    }

    /// C'tor. Bitcasts from an unsigned integer of pointer size.
    init (bitPattern: UInt) {
        self.rawValue = 0 as! builtin.RawPointer<T>
    }

    /// C'tor. Initialize from a reference.
    init (referencing reference: ref T) {
        self = builtin.addressOf(&reference)
    }

    /// Load the value at the address of this pointer.
    /// \return the value at the stored address.
    def load() -> T {
        return builtin.loadFromPointer(self.rawValue)
    }

    /// Store a value to the address of this pointer.
    def store(_ val: owned T) {
        builtin.storeToPointer(val, to: self.rawValue)
    }

    /// Convenience operator for loading the value of this pointer.
    /// \return the value at the stored address.
    def prefix *() -> T {
        return load()
    }
}

struct UnsafeMutableRawPtr {
    /// The raw pointer value.
    internal var rawValue: builtin.RawPointer

    /// Empty C'tor. Initializes to a null pointer.
    init {
        self.rawValue = 0 as! builtin.RawPointer
    }

    /// C'tor. Bitcasts from an unsigned integer of pointer size.
    init (bitPattern: UInt) {
        self.rawValue = 0 as! builtin.RawPointer
    }

    /// C'tor. Initialize from a reference.
    init <T>(referencing reference: ref T) {
        self = builtin.addressOf(&reference) as! builtin.RawPointer
    }

    /// C'tor. Initialize from a mutable typed pointer.
    init <T>(_ ptr: UnsafeMutablePtr<T>) {
        self.rawValue = ptr.rawValue as! builtin.RawPointer
    }
}

macro pointer_extensions{
    ($($Self:tok)*) => { $(
        extend $Self with Comparable {
            /// @inherit
            def infix <=>(rhs: Self) -> Int {
                return self.rawValue as! UInt <=> rhs.rawValue as! UInt
            }
        }

        extend $Self with StringRepresentable {
            /// @inherit
            def toString() -> String {
                return (self.rawValue as! UInt).toString<16>()
            }
        }

        extend $Self with Copyable, ImplicitlyCopyable {}
    )... }
}

pointer_extensions!{ UnsafePtr UnsafeMutablePtr UnsafeRawPtr UnsafeMutableRawPtr }
