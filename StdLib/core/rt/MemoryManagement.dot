
module std.rt

var allocs: u64 = 0
var deallocs: u64 = 0

deinit {
    if allocs != deallocs {
        libc.printf("[21;31mallocs: %llu, deallocs: %llu\n[0m ", allocs, deallocs)
    } else {
        debugPrint!("allocs: %llu, deallocs: %llu\n", allocs, deallocs)
    }
}

@extern(C) @compiletime
public def _cdot_Malloc(_ size: u64) -> UnsafeMutableRawPtr {
    ++allocs
    return libc.malloc(size)
}

@extern(C) @compiletime
public def _cdot_Realloc(_ ptr: UnsafeMutableRawPtr, _ size: u64) -> UnsafeMutableRawPtr {
    allocs += (!ptr as UInt)
    return libc.realloc(ptr, size)
}

@extern(C) @compiletime
public def _cdot_Free(_ ptr: UnsafeMutableRawPtr) {
    if ptr {
        ++deallocs
    }
    
    libc.free(ptr)
}