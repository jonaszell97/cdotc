
import builtin
import libc

var allocs: UInt = 0
var deallocs: UInt = 0

deinit {
    if allocs != deallocs {
        _ = libc.stdio.printf("[21;31mallocs: %llu, deallocs: %llu\n[0m ", allocs, deallocs)
    } else {
        debugPrint!("allocs: %llu, deallocs: %llu\n", allocs, deallocs)
    }
}

@extern(C) @compiletime
public def _cdot_Malloc(_ size: builtin.u64) -> builtin.RawPointer {
    allocs += 1
    return libc.stdlib.malloc(size)
}

@extern(C) @compiletime
public def _cdot_Realloc(_ ptr: builtin.RawPointer, _ size: builtin.u64) -> builtin.RawPointer {
    if UnsafeRawPtr(rawPointer: ptr) {
        allocs += 1
    }

    return libc.stdlib.realloc(ptr, size)
}

@extern(C) @compiletime
public def _cdot_Free(_ ptr: builtin.RawPointer) {
    if UnsafeRawPtr(rawPointer: ptr) {
        deallocs += 1
    }

    libc.stdlib.free(ptr)
}