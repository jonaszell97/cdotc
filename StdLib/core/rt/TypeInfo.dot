
module std.rt

public struct ValueWitnessTable with MoveOnly {
    /// Function that copies an existential value.
    let copy: @thin (UnsafeMutableRawPtr, UnsafeRawPtr) -> Void

    /// Function that deinitializes an existential value.
    /// For classes, this is a reference to _cdot_Release, not the actual deinitializer.
    let deinit: @thin (UnsafeMutableRawPtr) -> Void
}

public struct ProtocolConformance {
    /// Pointer to the protocol type-info object.
    var typeInfo: UnsafePtr<TypeInfo>

    /// Pointer to the vtable for this protocol.
    var vtable: UnsafePtr<UnsafeRawPtr>

    /// Implicit conversion to bool.
    @implicit def infix as() -> Bool {
        return typeInfo != __nullptr
    }
}

public struct TypeInfo {
    /// Pointer to the base class type-info object, or `null` if there is none.
    let baseClass: UnsafePtr<TypeInfo>

    /// Pointer to the vtable in case of a class or protocol.
    let vtable: UnsafePtr<UnsafeRawPtr>

    /// Pointer to the deinitializer of this type.
    let deinit: @thin (UnsafeMutableRawPtr) -> Void

    /// NUL-terminated cstring containing the type name.
    let name: UnsafePtr<Byte>

    /// Pointer to the value witness table of this type.
    let valueWitnessTable: UnsafePtr<ValueWitnessTable>

    /// null-terminated array of protocol conformance objects.
    let conformances: UnsafePtr<ProtocolConformance>

    /// The size of a value of this type, in bytes.
    let size: UInt

    /// The alignment of a value of this type, in bytes.
    let alignment: UInt

    /// The stride of a value of this type, in bytes.
    let stride: UInt

    /// \return the vtable for a particular protocol.
    def getConformance(_ proto: UnsafePtr<TypeInfo>) -> UnsafePtr<ProtocolConformance> {
        if !conformances {
            return __nullptr
        }

        var i = 0u
        var conformances = conformances
        var conf = conformances + i++

        while conf {
            if conf->typeInfo == proto {
                return conf
            }

            conf = conformances + i++
        }

        return __nullptr
    }
}

public struct ClassHeader {
    /// Strong reference count of this class.
    var strongRefcount: u64

    /// Weak reference count of this class.
    var weakRefcount: u64

    /// Pointer to the type-info object.
    let typeInfo: UnsafePtr<TypeInfo>
}

/// \return pointer to the type-info object of a class.
@extern(C) public def _cdot_GetTypeInfo(_ ptr: UnsafePtr<ClassHeader>) -> UnsafePtr<TypeInfo> {
    return ptr->typeInfo
}

/// Compare two type-info objects for compatibility.
/// \return `true` iff they're compatible.
@extern(C) public def _cdot_TypeInfoCmp(_ lhs: UnsafePtr<TypeInfo>,
                                        _ rhs: UnsafePtr<TypeInfo>) -> Bool {
    var curr = lhs
    while curr {
        if curr == rhs {
            return true
        }

        curr = curr->baseClass
    }

    if !lhs->conformances {
        return false
    }

    var i = 0u
    curr = lhs->conformances[i++].typeInfo

    while curr {
        if curr == rhs {
            return true
        }

        curr = lhs->conformances[i++].typeInfo
    }

    return false
}

struct AnyOption<T> {
    var discriminator: Int8
    var object: T
}

/// Perform a dynamic downcast from a base class to a child.
/// \return `none` if the cast failed, `.Some(value)` otherwise.
@extern(C) public def _cdot_DynamicDownCast(_ object: UnsafePtr<ClassHeader>,
                                            _ rhs: UnsafePtr<TypeInfo>,
                                            _ result: mut ref AnyOption<UnsafeRawPtr>) {
    var curr = object->typeInfo
    while curr {
        if curr == rhs {
            result = AnyOption<UnsafeRawPtr>(discriminator: 1, object: object)
            return
        }

        curr = curr->baseClass
    }

    result = AnyOption<UnsafeRawPtr>(discriminator: 0, object: __nullptr)
}

/// Copy function for classes.
@_builtin @extern(C)
def _cdot_CopyClass(_ result: UnsafeMutableRawPtr, _ value: UnsafeRawPtr) {
    // Get the class reference.
    var classRef = builtin.unsafeConstCast(
        builtin.reinterpretCast<AtomicRefcounted>(value))

    // Retain the value.
    _cdot_AtomicRetain(classRef)

    // Set the new value to point to the retained class.
    var resultRef = builtin.reinterpretCast<UnsafeRawPtr>(result)
    builtin.storeToPointer(value, to: resultRef)
}

public struct ExistentialContainer {
    /// Pointer to the heap allocated memory where the value resides.
    var value: UnsafeMutableRawPtr

    /// Pointer to the type-info object of the wrapped value.
    var typeInfo: UnsafePtr<TypeInfo>

    /// Pointer to the currently active protocol conformance.
    var conformance: UnsafePtr<ProtocolConformance>

    // Default C'tor.
    init {
        self.value = __nullptr
        self.typeInfo = __nullptr
        self.conformance = __nullptr
    }

    // Memberwise C'tor.
    memberwise init
}

/// Initialize an existential container for a protocol value.
/// This function takes ownership of \param value without making a copy.
@extern(C)
public def _cdot_InitializeExistential(_ value: UnsafeRawPtr,
                                       _ valueTypeInfo: UnsafePtr<TypeInfo>, 
                                       _ protocolTypeInfo: UnsafePtr<TypeInfo>,
                                       _ result: mut ref ExistentialContainer) {
    // Heap-allocate space for the existential value.
    var alloc = mem.allocate(valueTypeInfo->stride,
                             alignTo: valueTypeInfo->alignment)

    // Do a shallow copy of the value.
    mem.copy(to: alloc, from: value, valueTypeInfo->size)

    // Get the protocol conformance.
    var conformance = valueTypeInfo->getConformance(protocolTypeInfo)

    // Initialize the existential container.
    result = ExistentialContainer(value: alloc, typeInfo: valueTypeInfo, conformance)
}

/// Deinitialize an existential container for a protocol value.
@extern(C)
public def _cdot_DeinitializeExistential(_ container: mut ref ExistentialContainer) {
    // Call the deinitializer of the existential value.
    container.typeInfo->deinit(container.value)

    // Free the memory allocated for the value.
    mem.deallocate(container.value)
}

/// Copy an existential container for a protocol value.
@_builtin @extern(C)
public def _cdot_CopyExistential(_ container: mut ref ExistentialContainer,
                                 _ result: mut ref ExistentialContainer) {
    // Heap-allocate space for the existential value.
    var alloc = mem.allocate(container.typeInfo->stride,
                             alignTo: container.typeInfo->alignment)

    // Call the witness copy function to create a copy of the value.
    container.typeInfo->valueWitnessTable->copy(alloc, container.value)

    // Initialize the existential container with the copied value.
    result = ExistentialContainer(value: alloc,
                                  typeInfo: container.typeInfo,
                                  conformance: container.conformance)
}

@_builtin @extern(C)
public def _cdot_ExistentialCast(_ container: mut ref ExistentialContainer,
                                 _ destinationProtocolTypeInfo: UnsafePtr<TypeInfo>,
                                 _ result: mut ref ExistentialContainer) {
    // Find the conformance.
    var conformance = container.typeInfo->getConformance(destinationProtocolTypeInfo)
    if !conformance {
        sys.reportFatalError("cast from value of type ${container.typeInfo->name} to type ${destinationProtocolTypeInfo->name} failed")
    }

    // Copy the container.
    _cdot_CopyExistential(&container, &result)

    // Update the conformance.
    result.conformance = conformance
}

@_builtin @extern(C)
public def _cdot_ExistentialCastFallible(_ container: mut ref ExistentialContainer,
                                         _ destinationProtocolTypeInfo: UnsafePtr<TypeInfo>,
                                         _ result: mut ref AnyOption<ExistentialContainer>) {
    // Find the conformance.
    var conformance = container.typeInfo->getConformance(destinationProtocolTypeInfo)

    // Return none if the conformance was not found.
    if !conformance {
        result.discriminator = 0
        return
    }

    // Copy the container.
    _cdot_CopyExistential(&container, &result.object)

    // Update the conformance.
    result.object.conformance = conformance
    result.discriminator = 1
}

@_builtin @extern(C)
public def _cdot_ExistentialUnwrap(_ container: mut ref ExistentialContainer,
                                   _ destinationTypeInfo: UnsafePtr<TypeInfo>,
                                   _ result: mut ref AnyOption<UnsafeMutableRawPtr>) {
    // Check if the two types are compatible.
    var cmp = _cdot_TypeInfoCmp(container.typeInfo, destinationTypeInfo)

    // Not compatible.
    if !cmp {
        result.discriminator = 0
        return
    }

    // Call the witness copy function to create a copy of the value.
    container.typeInfo->valueWitnessTable->copy(result.object, container.value)
    result.discriminator = 1
}

public enum GenericArgumentValue {
    /// A generic type argument.
    case Type(UnsafePtr<TypeInfo>)

    /// A generic constant value argument.
    case Value()

    /// A variadic argument.
    case Variadic(Bool, UnsafePtr<GenericArgumentValue>)

    /// \return true iff this variadic argument is a type argument or a variadic type argument.
    prop isType: Bool {
        match self {
        case .Type(_):
            return true
        case .Value():
            return false
        case .Variadic(let type, _):
            return type
        }
    }
}

public struct GenericArgument {
    /// The name of the generic parameter.
    let name: CString

    /// The parameter value, depending on the argument kind.
    let value: GenericArgumentValue
}

public struct GenericEnvironment {
    /// Pointer to the enclosing generic environment, or null if none exists.
    let enclosingEnvironment: UnsafePtr<GenericEnvironment>

    /// null-terminated array of runtime template arguments.
    let genericArguments: UnsafePtr<GenericArgument>

    /// \return a generic argument with the name \param name, or `__nullptr` if it doesn't exist.
    def getGenericArgument(withName name: CString) -> UnsafePtr<GenericArgument> {
        var ptr = genericArguments
        if !ptr {
            return __nullptr
        }

        while ptr->name {
            if libc.strcmp(ptr->name, name) == 0 {
                return ptr
            }

            ptr += 1
        }

        if enclosingEnvironment {
            return enclosingEnvironment->getGenericArgument(withName: name)
        }

        return __nullptr
    }
}
