
module std.rt

using atomic.Atomic

struct Refcounted {
    var strongRefcount: u64
    var weakRefcount: u64
    let typeInfo: UnsafePtr<TypeInfo>
}

alias debugPrintEnabled = false
macro debugPrint(
    ($($args:expr),*) => {
        static if debugPrintEnabled {
            libc.printf($($args,)...)
        }
    }
)

@inline(always) @extern(C)
public def _cdot_Retain(_ target: UnsafeMutablePtr<Refcounted>) {
    assert!(target->strongRefcount != 0, "[1;35mretaining freed object $target![0m\n")

    ++target->strongRefcount
    debugPrint!("object %p of type %s after retain: %llu\n",
                target, target->typeInfo->name, target->strongRefcount)
}

@inline(always) @extern(C)
public def _cdot_WeakRetain(_ target: UnsafeMutablePtr<Refcounted>) {
    assert!(target->strongRefcount != 0, "[1;35mretaining freed object $target![0m\n")

    ++target->weakRefcount
    debugPrint!("object %p of type %s after weak retain: %llu\n",
                target, target->typeInfo->name, target->weakRefcount)
}

@inline(always) @extern(C)
public def _cdot_Release(_ target: owned UnsafeMutablePtr<Refcounted>) {
    if !target {
        return
    }

    assert!(target->strongRefcount != 0, "[1;35mtrying to release object $target with refcount of 0![0m\n")
    
    --target->strongRefcount
    
    debugPrint!("object %p of type %s after release: %llu\n",
               target, target->typeInfo->name, target->strongRefcount)

    if target->strongRefcount == 0 {
        target->typeInfo->deinitializer(target as! UnsafeMutableRawPtr)

        if target->weakRefcount == 0 {
            _cdot_Free(target as! UnsafeMutableRawPtr)
        }
    }
}

@inline(always) @extern(C)
public def _cdot_WeakRelease(_ target: owned UnsafeMutablePtr<Refcounted>) {
    if !target {
        return
    }

    assert!(target->strongRefcount != 0, "[1;35mtrying to release object $target with refcount of 0![0m\n")

    --target->weakRefcount

    debugPrint!("object %p of type %s after weak release: %llu\n",
               target, target->typeInfo->name, target->weakRefcount)

    if target->weakRefcount == 0u {
        _cdot_Free(target as! UnsafeMutableRawPtr)
    }
}

struct AtomicRefcounted {
    var strongRefcount: Atomic<u64>
    var weakRefcount: Atomic<u64>
    let typeInfo: UnsafePtr<TypeInfo>
}

@inline(always) @extern(C)
public def _cdot_AtomicRetain(_ target: UnsafeMutablePtr<AtomicRefcounted>) {
    assert!(target->strongRefcount != 0u, "[1;35mretaining freed object $target![0m\n")

    ++target->strongRefcount
    debugPrint!("object %p of type %s after retain: %llu\n",
                target, target->typeInfo->name, target->strongRefcount.load())
}

@inline(always) @extern(C)
public def _cdot_AtomicWeakRetain(_ target: UnsafeMutablePtr<AtomicRefcounted>) {
    assert!(target->strongRefcount != 0u, "[1;35mretaining freed object $target![0m\n")

    ++target->weakRefcount
    debugPrint!("object %p of type %s after weak retain: %llu\n",
                target, target->typeInfo->name, target->weakRefcount.load())
}

@inline(always) @extern(C)
public def _cdot_AtomicRelease(_ target: owned UnsafeMutablePtr<AtomicRefcounted>) {
    if !target {
        return
    }

    assert!(target->strongRefcount != 0u,
            "[1;35mtrying to release object $target with refcount of 0![0m\n")
    
    --target->strongRefcount
    
    debugPrint!("object %p of type %s after release: %llu\n",
                target, target->typeInfo->name, target->strongRefcount.load())

    if target->strongRefcount == 0u {
        target->typeInfo->deinitializer(target as! UnsafeMutableRawPtr)

        if target->weakRefcount == 0u {
            _cdot_Free(target as! UnsafeMutableRawPtr)
        }
    }
}

@inline(always) @extern(C)
public def _cdot_AtomicWeakRelease(_ target: owned UnsafeMutablePtr<AtomicRefcounted>) {
    if !target {
        return
    }

    assert!(target->strongRefcount != 0u,
            "[1;35mtrying to release object $target with refcount of 0![0m\n")
    
    --target->weakRefcount
    
    debugPrint!("object %p of type %s after weak release: %llu\n",
                target, target->typeInfo->name, target->weakRefcount.load())

    if target->weakRefcount == 0u {
        _cdot_Free(target as! UnsafeMutableRawPtr)
    }
}

struct Box {
    var strongRefcount: u64
    var weakRefcount: u64
    var deinitializer: @thin (UnsafeMutableRawPtr) -> Void
    var data: UnsafeMutableRawPtr
}

@extern(C)
public def _cdot_RetainBox(_ box: UnsafeMutablePtr<Box>) {
    ++box->strongRefcount
    debugPrint!("box %p after retain: %llu\n", box, box->strongRefcount)
}

@extern(C)
public def _cdot_ReleaseBox(_ box: UnsafeMutablePtr<Box>) {
    if !box {
        return
    }

    --box->strongRefcount
    debugPrint!("box %p after release: %llu\n", box, box->strongRefcount)

    if box->strongRefcount == 0 {
        debugPrint!("freeing box\n")
        if box->deinitializer as! u64 != 0 {
            box->deinitializer(box->data)
        }
        
        _cdot_Free(box as! UnsafeMutableRawPtr)
    }
}

struct AtomicBox {
    var strongRefcount: Atomic<u64>
    var weakRefcount: Atomic<u64>
    var deinitializer: @thin (UnsafeMutableRawPtr) -> Void
    var data: Byte
}

@extern(C)
public def _cdot_AtomicRetainBox(_ box: UnsafeMutablePtr<AtomicBox>) {
    ++box->strongRefcount
    debugPrint!("box %p after retain: %llu\n", box, box->strongRefcount.load())
}

@extern(C)
public def _cdot_AtomicReleaseBox(_ box: UnsafeMutablePtr<AtomicBox>) {
    if !box {
        return
    }

    --box->strongRefcount
    debugPrint!("box %p after release: %llu\n", box, box->strongRefcount.load())

    if box->strongRefcount == 0u {
        debugPrint!("freeing box\n")
        if box->deinitializer as! u64 != 0 {
            box->deinitializer(builtin.addressOf(&box->data))
        }
        
        _cdot_Free(box as! UnsafeMutableRawPtr)
    }
}

struct Lambda {
    let fn: UnsafeMutableRawPtr
    var strongRefcount: u64
    var captures: UnsafeMutablePtr<Box>
}

@extern(C)
public def _cdot_RetainLambda(_ lambda: UnsafeMutablePtr<Lambda>) {
    ++lambda->strongRefcount
    debugPrint!("lambda %p after retain: %llu\n", lambda, lambda->strongRefcount)
}

@extern(C)
public def _cdot_ReleaseLambda(_ lambda: UnsafeMutablePtr<Lambda>) {
    if !lambda {
        return
    }

    --lambda->strongRefcount
    debugPrint!("lambda %p after release: %llu\n", lambda, lambda->strongRefcount)

    if lambda->strongRefcount == 0 {
        _cdot_CleanupLambda(lambda)
    }
}

@extern(C)
public def _cdot_CleanupLambda(_ lambda: UnsafeMutablePtr<Lambda>) {
    debugPrint!("freeing lambda\n")

    if lambda->captures {
        var i = 0u
        var ptr = builtin.addressOf(lambda->captures)

        loop {
            var capt = *ptr
            if !capt {
                break
            }

            _cdot_ReleaseBox(capt)
            ++ptr
        }
    }

    _cdot_Free(lambda as! UnsafeMutableRawPtr)
}

struct AtomicLambda {
    let fn: UnsafeMutableRawPtr
    var strongRefcount: Atomic<u64>
    var captures: UnsafeMutablePtr<AtomicBox>
}

@extern(C)
public def _cdot_AtomicRetainLambda(_ lambda: UnsafeMutablePtr<AtomicLambda>) {
    ++lambda->strongRefcount
    debugPrint!("lambda %p after retain: %llu\n", lambda, lambda->strongRefcount.load())
}

@extern(C)
public def _cdot_AtomicReleaseLambda(_ lambda: UnsafeMutablePtr<AtomicLambda>) {
    if !lambda {
        return
    }

    --lambda->strongRefcount
    debugPrint!("lambda %p after release: %llu\n", lambda, lambda->strongRefcount.load())

    if lambda->strongRefcount == 0u {
        _cdot_AtomicCleanupLambda(lambda)
    }
}

@extern(C)
public def _cdot_AtomicCleanupLambda(_ lambda: UnsafeMutablePtr<AtomicLambda>) {
    debugPrint!("freeing lambda\n")

    if lambda->captures {
        var i = 0u
        var ptr = builtin.addressOf(lambda->captures)

        loop {
            var capt = *ptr
            if !capt {
                break
            }

            _cdot_AtomicReleaseBox(capt)
            ++ptr
        }
    }

    _cdot_Free(lambda as! UnsafeMutableRawPtr)
}
