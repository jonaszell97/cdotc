
import builtin
declare C def printf(builtin.RawPointer<builtin.u8>, ...) -> builtin.i32

protocol Initializable {
    init()
}

protocol Shape {
    prop area: builtin.f32 { get }
}

protocol P with Initializable {
    associatedType A
    associatedType B: Initializable = X
    associatedType C: Shape

    def func()
    def produce() -> A
    def consume(_ a: A)

    def makeShape() -> C

    prop heehee: builtin.i32 { get }
}

extend P {
    default def func() {
        _ = Self()
        __debug
        self.consume(self.produce())
        _ = self.heehee
    }

    def clunk() {
        _ = B()

        var s = makeShape()
        _ = printf("area: %f\n", s.area)
    }
}

struct X with Initializable {
    
}

struct Circle with Shape {
    var r: builtin.f32
    prop area: builtin.f32 {
        return builtin.fmul_f32(3.141, builtin.fmul_f32(r, r))
    }
}

struct S with P {
    associatedType A = builtin.u8
    associatedType C = Circle
    
    def produce() -> builtin.u8 {
        return 49
    }

    def consume(_ x: builtin.u8) {
        _ = printf("henlo %c\n", x)
    }

    def makeShape() -> C {
        return Circle(r: 5.0)
    }

    prop heehee: builtin.i32 { return 3 }
}