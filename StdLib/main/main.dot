
import libc

// struct Template<T> {}
// struct Template2<T> {}
// alias Template<T> = T

// protocol Nephew {}
// extend builtin.i64 with Nephew {}

// def funky<U: Nephew>(_ val: Template<U>) {}

// var x = 0 as Template<builtin.i64>
// funky(x)

var a = Atomic(weirdValue: 12)
// __debug

a.store(69)
let x = a.load()
// FIXME
// _ = printf("value: %d\n", x as builtin.i32)
_ = libc.stdio.printf("value: %llu\n", x)