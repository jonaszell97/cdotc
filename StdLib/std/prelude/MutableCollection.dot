
module std.experimental

protocol MutableCollection with RandomAccessCollection {
    /// Require subsequences to also be RandomAccessCollections.
    associatedType SubSequence: RandomAccessCollection

    /// Require subscript reassignment.
    subscript (position: Index) -> Element { get set }

    /// Require subscript range reassignment.
    subscript (bounds: Range<Index>) -> SubSequence { get set }

    /// Swap the elements at indices \param i and \param j.
    def mutating swapAt(_ i: Index, _ j: Index)

    /// Partition this collection using the predicate \param belongsInSecondPartition.
    /// \return an index where all elements smaller than the index do not satisfy the predicate,
    ///         and all equal to or after the index do satisfy it.
    def mutating partition(by belongsInSecondPartition: (Element) -> Bool) -> Index
}

extend MutableCollection {
    /// \inherit
    default def mutating swapAt(_ i: Index, _ j: Index) {
        _checkIndex(i)
        _checkIndex(j)

        if i == j {
            return
        }

        var tmp = self[i]
        self[i] = self[j]
        self[j] = tmp
    }

    /// \inherit
    default def mutating partition(by belongsInSecondPartition: (Element) -> Bool) -> Index {
        var i = firstIndex(where: belongsInSecondPartition)
        if i == endIndex {
            return i
        }

        var j = index(after: i)
        while j != endIndex {
            if !belongsInSecondPartition(self[j]) {
                swapAt(i, j)
                i = self.index(after: i) 
            }

            j = self.index(after: j) 
        }

        return i
    }
}