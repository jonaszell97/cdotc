
module std.experimental

protocol BidirectionalCollection with Collection {
    /// \return the index after the given one.
    def index(before: Index) -> Index
}

extend BidirectionalCollection {
    /// \inherit
    default def index(before idx: Index) -> Index {
        return index(idx, advancedBy: -1)
    }

    /// \return the last element in the collection, or `none` if the collection is empty.
    prop last: Element? {
        if empty {
            return none
        }

        return .Some(self[index(before: endIndex)])
    }

    /// \return a subsequence, up to the given maximum length, containing the
    /// final elements of the collection.
    def suffix(_ maxLength: Int) -> SubSequence {
        precondition!(maxLength >= 0, "Can't take a suffix of negative length from a collection")
        let start = index(endIndex, advancedBy: -maxLength, limitedBy: startIndex) ?? startIndex
        return self[start..endIndex]
    }
}