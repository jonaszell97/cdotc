
module std.experimental

protocol RangeReplaceableCollection with MutableCollection {
    /// Require subsequences to also be MutableCollections.
    associatedType SubSequence: MutableCollection

    /// RangeReplaceableCollections must be default initializable.
    init

    /// Replaces the specified subrange of elements with the given collection.
    def mutating replaceSubrange<C: Collection>(_ subrange: Range<Index>, with newElements: owned C)
        where C.Element == Element

    /// Prepares the collection to store the specified number of elements.
    def mutating reserveCapacity(_ n: Int)

    //===--- Derivable Requirements -----------------------------------------===//

    /// Creates a new collection containing the specified number of a single,
    init (repeating repeatedValue: Element, count: Int)

    /// Creates a new instance of a collection containing the elements of a
    init<S: Iterable>(_ elements: S)
        where S.Element == Element

    /// Adds an element to the end of the collection.
    def mutating append(_ newElement: owned Element)

    /// Adds the elements of a sequence or collection to the end of this
    /// collection.
    def mutating append<S: Iterable>(contentsOf newElements: owned S)
        where S.Element == Element

    /// Inserts a new element into the collection at the specified position.
    def mutating insert(_ newElement: owned Element, at i: Index)

    /// Inserts the elements of a sequence into the collection at the specified
    /// position.
    def mutating insert<S: Collection>(contentsOf newElements: owned S, at i: Index)
        where S.Element == Element

    /// Removes and returns the element at the specified position.
    @discardableResult
    def mutating remove(at i: Index) -> Element

    /// Removes the specified subrange of elements from the collection.
    def mutating removeSubrange(_ bounds: Range<Index>)

    /// Removes and returns the first element of the collection.
    @discardableResult
    def mutating removeFirst() -> Element

    /// Removes the specified number of elements from the beginning of the
    /// collection.
    def mutating removeFirst(_ k: Int)

    /// Removes all elements from the collection.
    def mutating removeAll(keepingCapacity keepCapacity: Bool = true)

    /// Removes all the elements that satisfy the given predicate.
    def mutating removeAll(where shouldBeRemoved: (Element) -> Bool)
}

extend RangeReplaceableCollection {
    /// \inherit
    default init<S: Iterable>(_ elements: S) where S.Element == Element {
        self.init()
        append(contentsOf: S)
    }

    /// \inherit
    default def mutating append(_ newElement: owned Element) {
        insert(newElement, at: endIndex)
    }

    /// \inherit
    default def mutating append<S: Iterable>(contentsOf newElements: owned S)
        where S.Element == Element
    {
        var requiredCapacity = self.size + newElements.underestimatedSize
        self.reserveCapacity(requiredCapacity)

        for el in newElements {
            append(el)
        }
    }

    /// \inherit
    default def mutating insert(_ newElement: owned Element, at i: Index) {
        replaceSubrange(i..i, with: CollectionOfOne(newElement))
    }

    /// \inherit
    default def mutating insert<S: Collection>(contentsOf newElements: owned S, at i: Index)
        where S.Element == Element
    {
        replaceSubrange(i..i, with: newElements)
    }

    /// \inherit
    default def mutating remove(at position: Index) -> Element {
        precondition!(!empty, "Can't remove from an empty collection")
        var result: Element = self[position]
        replaceSubrange(position..index(after: position), with: EmptyCollection())

        return result
    }

    /// \inherit
    default def mutating removeSubrange(_ bounds: Range<Index>) {
        replaceSubrange(bounds, with: EmptyCollection())
    }

    /// \inherit
    default def mutating reserveCapacity(_ n: Int) {}

    /// \inherit
    default def mutating removeFirst(_ k: Int) {
        if k == 0 { return }
        precondition!(k >= 0, "Number of elements to remove should be non-negative")
        precondition!(size >= k, "Can't remove more items from a collection than it has")
        let end = index(startIndex, advancedBy: k)
        removeSubrange(startIndex..end)
    }

    /// \inherit
    default def mutating removeFirst() -> Element {
        precondition!(!empty, "Can't remove first element from an empty collection")
        var firstElement = first!
        removeFirst(1)
        return firstElement
    }

    /// \inherit
    def mutating removeAll(keepingCapacity keepCapacity: Bool = false) {
        if !keepCapacity {
            self = Self()
        }
        else {
            replaceSubrange(startIndex..endIndex, with: EmptyCollection())
        }
    }
}

extend RangeReplaceableCollection {
    /// Initialize from a repeated element.
    init (repeating value: Element, count: Int) {
        self.init()
        for _ in 0..count {
            append(value.copy())
        }
    }
}
