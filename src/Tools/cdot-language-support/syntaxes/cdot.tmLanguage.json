{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "cdot",
	"repository": {
		"identifier": {
			"patterns": [
				{
					"match": "[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+",
					"name": "nothing.cdot"
				}
			]
		},
		"dollar-identifier": {
			"patterns": [
				{
					"match": "\\$[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>~\\^,\\(\\)\\{\\}]+",
					"name": "keyword.control.cdot"
				}
			]
		},
		"percent-identifier": {
			"patterns": [
				{
				"match": "%[^ :\\?\\[\\]\\+\\-\\*/%&\\|!=<>~\\^,\\(\\)\\{\\}]+",
				"name": "storage.modifier.package.cdot"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"name": "support.type.cdot",
					"match": "[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+"
				}
		]
		},
		"template-arg-decl": {
			"patterns": [
				{
					"begin": "\\[",
					"end": "\\](?=\\s*(\\(|\\{|with|where|\\->|=|\\n))",
					"patterns": [{
							"match": "(value|typename)",
							"captures": {
								"1": {
									"name": "keyword.control.cdot"
								}
							}
						},
						{
							"match": ":\\s*([a-zA-Z0-9]+)",
							"captures": {
								"1": {
									"name": "support.type.cdot"
								}
							}
						},
						{
							"include": "#literals"
						},
						{
							"include": "#operators"
						}
					]
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.cdot",
					"match": "\\b(true|false|none|__nullptr|__ctfe)\\b"
				},
				{
					"name": "constant.numeric.hex.cdot",
					"match": "\\b\\-?0[xX][0-9a-fA-F]+[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.binary.cdot",
					"match": "\\b\\-?0[bB][01]+[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.octal.cdot",
					"match": "\\b\\-?0[1-9][0-9]*[uUlLdDfF]*\\b"
				}, {
					"name": "constant.numeric.decimal.cdot",
					"match": "\\b-?(?:0|[1-9][0-9_]*)(?:\\.[0-9]+){0,1}(?:[eE][-]{0,1}[0-9]+){0,1}([uU][lL]?|[lL][uU]?|[fF]|[dD])?\\b"
				},
				{
					"name": "constant.other.placeholder.cdot",
					"match": "%[cCdDiIeEfFsS]|%[lL][lL]?[uU]"
				}, {
					"name": "string.quoted.double.cdot",
					"begin": "\"",
					"end": "(?<!\\\\)\"",
					"beginCaptures": {
						"0": {
							"name": "string.quoted.double.cdot"
						}
					},
					"endCaptures": {
						"0": {
							"name": "string.quoted.double.cdot"
						}
					},
					"patterns": [
						{
							"match": "(?<!\\\\)\\$[^\\{\\}\\$ \":,]+",
							"name": "punctuation.section.embedded.cdot"
						},
						{
							"match": "%(l{,2}(u|i|d)|p|f|c|s)",
							"name": "constant.numeric.cdot"
						},
						{
							"begin": "(\\$\\{)",
							"end": "(\\})",
							"beginCaptures": {
								"1": {
									"name": "punctuation.section.embedded.cdot"
								}
							},
							"endCaptures": {
								"1": {
									"name": "punctuation.section.embedded.cdot"
								}
							},
							"patterns": [
								{
									"include": "#literals"
								},
								{
									"include": "#operators"
								},
								{
									"match": ".",
									"name": "keyword.operator.ident.cdot"
								}
							]
						},
						{
							"name": "constant.character.escape.cdot",
							"match": "\\\\[anrtve0]"
						}
					]
				},
				{
					"name": "string.quoted.single.cdot",
					"match": "'(.|\\\\u\\{[0-9a-fA-F]{1,4}\\}|\\\\[narvtb\"'0])'"
				},
				{
					"name": "string.quoted.other.cdot",
					"match": "`[^`]*`"
				},
				{
					"match": "(@[a-zA-Z0-9_]+)\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.attribute.cdot"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.other.cdot",
					"match": "\\[|\\]"
				}, {
					"name": "keyword.operator.logical.cdot",
					"match": "(&&|\\|\\||!)"
				}, {
					"name": "keyword.operator.arithmetic.cdot",
					"match": "(\\+|\\*|-(?=[^0-9])|/|%|\\*\\*)"
				}, {
					"name": "keyword.operator.bitwise.cdot",
					"match": "(===|!==|<<|>>|~|&|\\^|\\|)"
				}, {
					"name": "keyword.operator.comparison.cdot",
					"match": "(==|!=|<|>|<=|>=)"
				}, {
					"name": "keyword.operator.assignment.cdot",
					"match": "="
				},
				{
					"match": "\\s+(as(?:!|\\?)?|isa)\\s+([a-zA-Z0-9_\\$]+)",
					"captures": {
						"1": {
							"name": "keyword.control.cdot"
						},
						"2": {
							"name": "support.type.cdot"
						}
					}
				},
				{
					"begin": "#\\{",
					"end": "\\}",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.other.cdot"
						}
					},
					"endCaptures": {
						"0": {
							"name": "keyword.operator.other.cdot"
						}
					},
					"patterns": [
						{
							"include": "#literals"
						},
						{
							"include": "#operators"
						},
						{
							"match": ".",
							"name": "keyword.operator.ident.cdot"
						}
					]
				}
			]
		}
	},
	"patterns": [
		{
			"include": "#dollar-identifier"
		},
		{
			"include": "#percent-identifier"
		},
		{
			"name": "comment.block.cdot",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.block.documentation.cdot",
			"begin": "/\\*\\*",
			"end": "\\*/"
		},
		{
			"name": "comment.line.cdot",
			"begin": "//",
			"end": "\\n"
		},
		{
			"match": "(for|static_for)\\s+(var|let)\\s+[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+\\s+(in)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				},
				"2": {
					"name": "keyword.control.cdot"
				},
				"3": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"name": "keyword.control.cdot",
			"match": "\\b(let|var|match|if|else|while|loop|for|default|continue|break|return|operator|goto|typeof|associatedType|new|of|throw|try|catch|finally|prop|union|typedef|mutating|where|with|(?:memberwise\\s+)?init|deinit|ref|declare|native|unsafe|__debug|__unreachable|__traits|static_assert|static_if|static_for|static_print|sizeof|alignof|sizeof\\.\\.\\.)\\b"
		},
		{
			"name": "keyword.control.cdot",
			"match": "#(define|ifdef|ifndef|undef|if|endif|else|elseif|pragma|rawdef|enddef|let|endfor|print|include|endnamespace)\\b"
		},
		{
			"match": "(#macro|#?using|module|#?namespace|import)\\s+(?:[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+\\.?)+",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"match": "(#?namespace)\\s*(?=\\{)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"match": "(#for)\\s+[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+\\s+(in)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				},
				"2": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"match": "(?<=[a-zA-Z0-9_\\$])\\.([^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+)(?=\\(|\\<)",
			"captures": {
				"1": {
					"name": "support.function.any-method.cdot"
				}
			}
		},
		{
			"begin": "(struct|extend|class|protocol|enum)\\s+((?:#\\{)?[_A-Za-z][_A-Za-z0-9]*?(?:\\})?)\\b",
			"end": "(?=\\{|where|with|:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cdot"
				},
				"0": {
					"name": "entity.name.type.cdot"
				}
			},
			"endCaptures": {
				"0": {
					"name": "keyword.operator.cdot"
				}
			},
			"patterns": [
				{
					"include": "#template-arg-decl"
				}
			]
		},
		{
			"begin": "(alias)\\s+((?:#\\{)?[_A-Za-z][_A-Za-z0-9]*?(?:\\})?)\\b",
			"end": "(?=\\=|where|$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cdot"
				},
				"0": {
					"name": "entity.name.type.cdot"
				}
			},
			"patterns": [{
				"include": "#template-arg-decl"
			}]
		},
		{
			"match": "(\\->|:) *(ref) *([a-zA-Z0-9_\\$]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.other.cdot"
				},
				"2": {
					"name": "keyword.control.cdot"
				},
				"3": {
					"name": "support.type.cdot"
				}
			}
		},
		{
			"match": "(\\->) *([\\+\\-]?)([a-zA-Z0-9_\\$]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.other.cdot"
				},
				"2": {
					"name": "keyword.operator.arithmetic.cdot"
				},
				"3": {
					"name": "support.type.cdot"
				}
			}
		},
		{
			"include": "#operators"
		},
		{
			"match": "(?<=[a-zA-Z0-9_\\$])(\\.)([a-zA-Z0-9_\\$]+)(?!\\.|\\()\\b",
			"comment": "data member",
			"captures": {
				"1": {
					"name": "keyword.operator.other.cdot"
				},
				"2": {
					"name": "variable.other.member.cdot"
				}
			}
		},
		{
			"match": "[^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}0-9][^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]*(?:\\.([0-9]+))+",
			"comment": "indexed tuple access (must be before floating point literal)",
			"captures": {
				"1": {
					"name": "variable.other.member.cdot"
				}
			}
		},
		{
			"include": "#literals"
		},
		{
			"name": "variable.language.dot",
			"match": "\\bsuper|self\\b"
		},
		{
			"match": ": *(def)",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"begin": "(^|\\b)def\\b",
			"end": "\\(|\\{",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.cdot"
				}
			},
			"endCaptures": {
				"0": {
					"name": "keyword.operator.punctuator.cdot"
				}
			},
			"patterns": [
				{
					"match": "mutating|infix\\s+as",
					"name": "keyword.control.cdot"
				},
				{
					"match": "`[^`]+`",
					"name": "entity.name.function.cdot"
				},
				{
					"match": "(infix|prefix|postfix)\\s+[^ ]+",
					"captures": {
						"1": {
							"name": "keyword.control.cdot"
						},
						"2": {
							"name": "keyword.operator.cdot"
						}
					}
				},
				{
					"match": "([^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+|`[^`]+`)\\s*(?=\\(|\\-|<)",
					"name": "entity.name.function.cdot"
				},
				{
					"include": "#template-arg-decl"
				}
			]
		},
		{
			"match": "\\b(case)\\s+[_A-Za-z\\$][_A-Za-z0-9\\$]*\\b",
			"captures": {
				"1": {
					"name": "keyword.control.cdot"
				}
			}
		},
		{
			"match": "case",
			"name": "keyword.control.cdot"
		},
		{
			"name": "keyword.control.cdot",
			"match": "\\b(abstract|sealed|public|private|protected|final|const|static|get|set)\\b"
		},
		{
			"match": "(?<=[ \\[\\]\\+\\-\\*/%&\\|\\!=<>\\.~\\^,\\(\\)\\{\\}])([^ \\[\\]\\+\\-\\*/%&\\|!=<>\\.~\\^,\\(\\)\\{\\}]+)(?:\\(|<)",
			"captures": {
				"1": {
					"name": "support.function.any-method.cdot"
				}
			}
		},
		{
			"match": "(?<=[a-zA-Z0-9_\\$])\\.([^0-9 \\.\\(\\)]+)\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.cdot"
				}
			}
		},
		{
			"match": "\\b(?:U?Int(?:1|8|16|32|64)?|Float|Double|Bool|Char|u?int(?:1|8|16|32|64)?|float|double|bool|char|word|uword|intptr|uintptr)\\b",
			"name": "support.type.cdot"
		},
		{
			"include": "#identifier"
		}
	],
	"scopeName": "source.cdot"
}