
using Builtin.Primitive.*

struct Char {
    let val: int8 { get }

    init {
        val = '\0'
    }

    def infix as int8 {
        return val
    }
}

extend Char with StringRepresentable {
    def infix as String {
        return String(self)
    }
}

extend Char {
    enum ASCII(int8) {
        case nul = 0,
          soh,
          stx,
          etx,
          eot,
          enq,
          ack,
          bel,
          bs,
          tab,
          lf,
          vt,
          ff,
          cr,
          so,
          si,
          dle,
          dc1, dc2, dc3, dc4,
          nak,
          syn,
          etb,
          can,
          em,
          sub,
          esc,
          fs,
          gs,
          rs,
          us,
          ` `,
          `!`,
          `"`,
          `#`,
          `$`,
          `%`,
          `&`,
          `'`,
          `(`,
          `)`,
          `*`,
          `+`,
          `,`,
          `-`,
          `.`,
          `/`,
          `0`,
          `1`,
          `2`,
          `3`,
          `4`,
          `5`,
          `6`,
          `7`,
          `8`,
          `9`,
          `:`,
          `;`,
          `<`,
          `=`,
          `>`,
          `?`,
          `@`,
          A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
          `[`,
          `\`,
          `]`,
          `^`,
          `_`,
          backtick,
          a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z,
          `{`,
          `|`,
          `}`,
          `~`,
          del

        def charOf () -> Char {
            return Char(self)
        }
    }
}